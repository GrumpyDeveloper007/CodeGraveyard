#include <i86.h>
#include <math.h>
#include <conio.h>
#include <fstream.h>
#include <iostream.h>
#include <time.h>
#include "\coding\watcom\xavstuff\h\video.h"
#include "\coding\watcom\XavStuff\h\fixed32.h"
//#include "assem.h"

const float _PI=3.141592654;
float DistanceTable[65536];
unsigned short ScanBufferLeft[200];
unsigned short ScanBufferRight[200];
//unsigned char *Screen=(unsigned char *)0x0a0000;
unsigned char *Texture;
short ChangeX1,ChangeY1;
short ChangeX2,ChangeY2;
short MinY=399,MaxY=0;
float Ax=160,Ay=5,Bx=300,By=50,Cx=160,Cy=190,Dx=10,Dy=50;


 unsigned char *Buffer1,*Screen;
 unsigned char CurrentPal[256*3];
 int i,t;

#include "..\XavStuff\h\pcx.h"
PCXHeader HeaderInfo;


void MakeDistanceTable()
 {
 int i,t;
 for (i=0;i<256;i++)
  for (t=0;t<256;t++)
   DistanceTable[i*256+t]=(float) sqrt(i*i+t*t);
 }

void ScanConvert(int x1,int y1,int x2,int y2)   // To convert standard poly {
 {
 Fixed mx;   // slope of x
 Fixed temp; // for swapping
 Fixed x,y;  // source x and y screen coordinates
 int TempX;  // Dark

 if(y1 > y2) // make sure that edge goes from top to bottom
  {
  temp=x1;  // we need to swap the coordinates around
  x1=x2;
  x2=temp;

  temp=y1;
  y1=y2;
  y2=temp;
  }


 if(y2!=y1 ) // initialize the slopes for stepping the edges
  mx = (Int2Fixed(x2-x1)) / (y2-y1); // dx/dy

 x=Int2Fixed(x1);
 for(y=y1;y<=y2;y++)
  {
   TempX=Fixed2Int(x);
   if (TempX<ScanBufferLeft[y])
     ScanBufferLeft[y]=TempX;
   if (TempX>ScanBufferRight[y])
     ScanBufferRight[y]=TempX;
  x+=mx;
  }
 }


 int TextureX=128,TextureY=128;

// Lots of revisions in this code
//
//
void TexturePlot()
 {
 int i, t;
 int YMul, TYPE;
 int A, B, C, D; // Y values of points (Orded)
 int StartX, EndX;
 float SX, SY, DX, DY;
 float DXStep;
 float GX, GY;
 float MGX, MGY;
 float MSX, MSY, MDX, MDY;
 A=Ay;B=By;C=Cy;D=Dy;
 if (A>B)
  { i=A;A=B;B=i;}
 if (B>C)
  { i=B;B=C;C=i;}
 if (C>D)
  { i=C;C=D;D=i;}
 if (A>B)
  { i=A;A=B;B=i;}
 if (B>C)
  { i=B;B=C;C=i;}
 if (A>B)
  { i=A;A=B;B=i;}


 if (Ay<By && Ay<Cy && Ay<Dy)
  { SX=0;SY=0;TYPE=1;
  MSX=TextureX/(By-Ay); // Source in source gradient
  MSY=0;
  MDX=0;                // Destnation in source gradient
  MDY=TextureY/(Dy-Ay);
  }
 else
   if (Ay>By && Ay>Cy && Ay>Dy)
    { SY=TextureX; SY=TextureY; TYPE=2;
    MSX=-TextureX/(Dy-Cy); // Source in source gradient
    MSY=0;
    MDX=0;                // Destnation in source gradient
    MDY=-TextureY/(By-Cy);
    }
   else
     if (Ax<Bx && Ax<Cx && Ax<Dx)
      { SX=TextureX; SY=0; TYPE=3;
  MSX=-TextureX/(Cy-By); // Source in source gradient
  MSY=0;
  MDX=0;                // Destnation in source gradient
  MDY=TextureY/(Ay-By);
      }
      else
        { SX=0; SY=TextureY;TYPE=4;
  MSX=TextureX/(Ay-Dy); // Source in source gradient
  MSY=0;
  MDX=0;                // Destnation in source gradient
  MDY=-TextureY/(Cy-Dy);
        }

  DX=SX;DY=SY;


 YMul=(int)A*320;
 for(i=A;i<B;i++)
   {
   StartX=ScanBufferLeft[i];
   EndX=ScanBufferRight[i];
   DXStep=EndX-StartX; // M1=length of line in destnation
   GX=SX;
   GY=SY;
   MGX=(DX-SX)/DXStep;
   MGY=(DY-SY)/DXStep;
   for(t=0;t<DXStep;t++)
     {
     Screen[(int) (t+StartX+YMul) ]=Buffer1[(int) ( GX+(int)GY*TextureX )&16383];
     GX+=MGX;
     GY+=MGY;
     }
   YMul+=320;
   SX+=MSX; // Next X line in source
   SY+=MSY; // Next Y line in source
   DX+=MDX;
   DY+=MDY;
   }

 if (TYPE==1)
  {
  if (B==(int)By)  // Check right edge
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Cy-By);
   }
  if (B==(int)Dy)  // Check left edge
   {
   DX=0;DY=TextureY;MDX=TextureX/(Cy-Dy);MDY=0;
   }
  }

 if (TYPE==2)
  {
  if (B==(int)Dy)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Ay-Dy);
   }
  if (B==(int)By)
   {
   DX=0;DY=TextureY;MDX=TextureX/(Ay-By);MDY=0;
   }
  }

 if (TYPE==3)
  {
  if (B==(int)Cy)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Dy-Cy);
   }
  if (B==(int)Ay)
   {
   DX=0;DY=TextureY;MDX=TextureX/(Dy-Ay);MDY=0;
   }
  }

 if (TYPE==4)
  {
  if (B==(int)Ay)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(By-Ay);
   }
  if (B==(int)Cy)
   {
   DX=0;DY=TextureY;MDX=TextureX/(By-Cy);MDY=0;
   }
  }
 for(i=B;i<C;i++)
   {
   StartX=ScanBufferLeft[i];
   EndX=ScanBufferRight[i];
   DXStep=EndX-StartX; // M1=length of line in destnation
   GX=SX;
   GY=SY;
   MGX=(DX-SX)/DXStep;
   MGY=(DY-SY)/DXStep;
   for(t=0;t<DXStep;t++)
     {
     Screen[(int) (t+StartX+i*320) ]=Buffer1[(int) ( GX+(int)GY*TextureX )&16383];
     GX+=MGX;
     GY+=MGY;
     }
   SX+=MSX; // Next X line in source
   SY+=MSY; // Next Y line in source
   DX+=MDX;
   DY+=MDY;
   }
 if (TYPE==1)
  {
  if (C==(int)By)  // Check right edge
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Cy-By);
   }
  if (C==(int)Dy)  // Check left edge
   {
   DX=0;DY=TextureY;MDX=TextureX/(Cy-Dy);MDY=0;
   }
  }

 if (TYPE==2)
  {
  if (C==(int)Dy)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Ay-Dy);
   }
  if (C==(int)By)
   {
   DX=0;DY=TextureY;MDX=TextureX/(Ay-By);MDY=0;
   }
  }

 if (TYPE==3)
  {
  if (C==(int)Cy)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(Dy-Cy);
   }
  if (C==(int)Ay)
   {
   DX=0;DY=TextureY;MDX=TextureX/(Dy-Ay);MDY=0;
   }
  }

 if (TYPE==4)
  {
  if (C==(int)Ay)
   {
   SX=TextureX;SY=0;MSX=0;MSY=TextureY/(By-Ay);
   }
  if (C==(int)Cy)
   {
   DX=0;DY=TextureY;MDX=TextureX/(By-Cy);MDY=0;
   }
  }

 for(i=C;i<D;i++)
   {
   StartX=ScanBufferLeft[i];
   EndX=ScanBufferRight[i];
   DXStep=EndX-StartX; // M1=length of line in destnation
   GX=SX;
   GY=SY;
   MGX=(DX-SX)/DXStep;
   MGY=(DY-SY)/DXStep;
   for(t=0;t<DXStep;t++)
     {
     Screen[(int) (t+StartX+i*320) ]=Buffer1[(int) ( GX+(int)GY*TextureX )&16383];
     GX+=MGX;
     GY+=MGY;
     }
   SX+=MSX; // Next X line in source
   SY+=MSY; // Next Y line in source
   DX+=MDX;
   DY+=MDY;
   }

 }






void main ()
 {
 clock_t Start,End;
 int Frame=0;


 Screen=(unsigned char*)0x0a0000;
 Buffer1=new unsigned char[65536];

 GetPCXInfo(&HeaderInfo,"texture.PCX");
 GetPCXPicture(&HeaderInfo,"texture.PCX",Buffer1);
 GetPCXPalette(&HeaderInfo,"texture.PCX",CurrentPal);


 InitVideo();
 SetPalette(CurrentPal,0,256);

 Start=clock();
 float ax1=50,ay1=-50,bx1=50,by1=50;
 float cx1=-50,cy1=50,dx1=-50,dy1=-50;
 float Angle=0;

 while(!kbhit())
 {
 Angle+=0.01;
 if (Angle>=_PI*2)
  Angle=0;
 for(i=0;i<200;i++)     // Initialises Scanbuffer
  {
  ScanBufferLeft[i]=320;
  ScanBufferRight[i]=0;
  }
 Ax=(ax1*sin(Angle)+ay1*cos(Angle))+160;
 Ay=(-ax1*cos(Angle)+ay1*sin(Angle))+100;
 Bx=(bx1*sin(Angle)+by1*cos(Angle))+160;
 By=(-bx1*cos(Angle)+by1*sin(Angle))+100;
 Cx=(cx1*sin(Angle)+cy1*cos(Angle))+160;
 Cy=(-cx1*cos(Angle)+cy1*sin(Angle))+100;
 Dx=(dx1*sin(Angle)+dy1*cos(Angle))+160;
 Dy=(-dx1*cos(Angle)+dy1*sin(Angle))+100;
 ScanConvert(Ax,Ay,Bx,By);
 ScanConvert(Bx,By,Cx,Cy);
 ScanConvert(Cx,Cy,Dx,Dy);
 ScanConvert(Dx,Dy,Ax,Ay);
   TexturePlot();
    Frame++;
  }

 End=clock();
 KillVideo();
 cout << "Frame number :"<<Frame<<"   start,end :"<<Start<<" : "<<End<<endl;
 cout << "Frames Per Second = " << (Frame*CLOCKS_PER_SEC)/(End-Start)<<endl;
 cout << "\nCode By Dark Elf / Phobia"<<endl;
 }

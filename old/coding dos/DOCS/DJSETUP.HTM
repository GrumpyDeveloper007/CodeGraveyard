<html>
<head>
<title>DJGPP QuickSetup Guide</title>
</head>
<body background="pics/newbg.jpg">
<h1>DJGPP QuickSetup Guide</h1>
<p>
<b>DJGPP</b> is a free yet powerful 32-bit C/C++ development system for Intel 80386+ PC's. It includes ports of many GNU development utilities.
<p>
The main site is located at <a href="http://www.delorie.com/djgpp/"> DJ Delorie's Home Page</a> where the most up-to-date information is available, including announcements, bug reports and fixes, FAQ lists, an online topic search program, software contributions, and more.
<p>
<hr size=5>
<p>
<h3>Getting Started</h3>
<p>
<img src="pics/red-ball.gif" alt="*** ">
<b>If you are new to DJGPP, I suggest that you read more about it first before downloading the entire package from ftp sites on the Internet.
</b>
<p>
<img src="pics/yellow-ball.gif" alt="* ">
First things first, so <i>get</i> the FAQ lists <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v1/faq102.zip">faq102.zip</a> and <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2/faq210b.zip">faq210b.zip</a>, and <i>read</i> them carefully, especially Sections 1-3, which will help you get started.
<p>
The current versions of DJGPP are v1.12 and v2.01. I highly recommend v2, as has many advantages over v1, such as better ANSI-compliance, etc.
<p>
<hr size=5>
<p>
<h3>Obtaining the packages and installing them</h3>
<p>
<img src="pics/red-ball.gif" alt="*** ">
<b>Getting the documentation and reading them is very important. Online docs for DJGPP are in the txi*.zip package; also, each module has its own separate manual.
</b> 
<p>
<img src="pics/yellow-ball.gif" alt="* ">
The two versions of DJGPP have slightly different setups. Click on the version number to obtain specific information on each setup.  
<p>
<ul>
<li><a href="djv112.html"><b>v1.12</b></a>           
<p>
<li><a href="djv200.html"><b>v2.01</a> (RECOMMENDED)</b>
</ul>
<p>
<img src="pics/yellow-ball.gif" alt="* ">
All files should be unpacked by '<b>pkunzip -d file.zip</b>' or '<b>unzip file.zip.</b>' Maintenance files have to be installed <i>last</i> and <i>in order</i>: m1, m2,... After unzipping a maintenance file, you need to <i>run a batch file</i> that it installs <i>before</i> continuing with the next maintenance file.
<p>
<img src="pics/red-ball.gif" alt="*** ">
There is also a minimal DJGPP package described in Section 3.6 of the FAQ list. The <a href="ftp://turnbull.sk.tsukuba.ac.jp/pub/djgpp/packages/ez-gcc/">EZ-GCC</a> version is about 5M compressed. <b>Note</b>: This is DJGPP v1.1x! You REALLY should get v2 as it is much better.
<p>
<hr size=5>
<p>
<h3>Building your first DJGPP program!</h3>
For those familiar with gcc, just go right ahead and type 'gcc args...' Remember, DJGPP is gcc for DOS. For those new to gcc and/or command-line compilers in general, here's a quick guide to compiling, running, debugging, and profiling your programs.
<p>
<ul>
<li><b>Compiling and linking</b>
<p>
I use the term <i>compile</i> to describe turning source code into object code, <i>linking</i> as putting together object code into an executable format, and <i>building</i> as compiling then linking.
<p>
To build (compile and link) your files, just type 'gcc -o output input...' A coff binary would be produced using v1.12, and an exe file with v2. To run the file in v1.12, just do 'go32 output', or in v2, type 'output'. A coff binary produced by v1.12 can be converted to an executable file through 'coff2exe hello'.
<p>
<img src="pics/red-ball.gif" alt="*** "> 
For v2, make sure you are running under a DPMI server (QDPMI, Windows, OS/2, etc.) or CWSDPMI.EXE (from the csdpmi*.zip file) is in the current directory or path.
<p>
Some short examples:
<p>
<ul>
<li>Compiling a program
<p>
gcc -c input.c
<p>
<li>Building a program whose source is contained in a single file
<p>
gcc -o output input.c (v1.12)
<p>
gcc -o output.exe input.c (v2)
<p>
To run your executable, type 'go32 output' (v1.12) or 'output.exe' (v2) 
<p>
<li>Building a program contained in multiple source files
<p>
gcc -o output file1.c file2.c file3.c
<p>
To execute, type 'go32 output' (v1.12) or 'output.exe' (v2) 
<p>
Source files could have the extensions '.c', '.cc', '.cpp', '.s', etc. See the FAQ list and read the docs for more information on how gcc handles each file extension by default.
</ul>
<p>
Libraries can be linked in using the '-l' switch. You should <i>always</i> put them last on the command line. The standard C library (libc.a) is linked in automatically so you don't have to specify it for most of your programs. If you need to link in multiple libraries, just remember that the correct order has to be '-lall_other_libs_first -lgpp -lm -lpc'. 
<p>
So for most of your programs, you do not have to specify a '-llib' parameter at all. If you want to link in the GNU C++ library, use '-lgpp'; for the streams subset of the GNU C++ library, use '-liostream'; for the standard math functions, use '-lm'; for PC-specific functions such as BIOS calls provided by DJGPP, use '-lpc'. (Note: '-lpc' is no longer needed in v2)
<p>
Some short examples:
<p>
<ul>
<li>Libraries should be specified last on the command line
<p>
gcc -o output input -llib1 -llib2 -llib3...
<p>
<li>Linking in a standard library
<p> 
Suppose you're using C++ iostream code in your hello.cpp program
<p>
gcc -o output input.cpp -liostream
<p>
Look inside the 'djgpp\lib' directory. The file corresponding to '-liostream' is 'libiostream.a'. (or 'libiostr.a' because of FAT's 8.3 file name format) The standard C library, contained in 'djgpp\lib\libc.a,' can be explicitly linked in using '-lc'. See a pattern? In general, 'libX.a' in 'djgpp\lib' corresponds to '-lX' on the command line.   
<p>
Please refer to the docs for more information on the various standard libraries that come with DJGPP.
<p>
Again, the standard C library is automatically linked in by gcc so '-lc' is unnecessary.
<p>
<li> Linking in multiple libraries
<p>
gcc -o output input.c -lmylib1 -lgpp -lpc
<p>
<img src="pics/red-ball.gif" alt="*** ">
A very important thing to remember is that DJGPP behaves unpredictably for different orderings of libraries given on the command line. If you are linking in multiple libraries, the correct order is '-lall_other_libs -lgpp -lm -lpc'.
<p>
</ul>
Other options that you might find useful are '-Wall' to report all compiler warnings, '-On' where n is the optimization level number, '-g' to generate debug information (necessary for debugging), etc.
<p>
Some short examples:
<p>
<ul>
<li>Report all warnings
<p>
gcc -Wall -o input input
<p>
<li>Optimizing the output with O1
<p>
gcc -O1 -o output input
<p>
<li>Optimize even more with O2
<p>
gcc -O2 -o output input
<p>
<li>Generate debug info inside output
<p>
gcc -g -o output input
<p>
<li>Report all warnings, optimize, and generate debug info
<p>
gcc -Wall -O2 -g -o output input
<p>
In general, there is no proper ordering needed for these options on the command line. Just remember that all '-llib' come last, and they follow some order among themselves. 
<p> 
<li>A sample command line
<p>
gcc -Wall -O2 -g -o hello hello.c myobjfile.o myasmsrc.s -lacmelib -lgpp -lm 
<p>
</ul>
<p>
<li><b>Debugging</b>
<p>
To debug programs in v1.12, type 'go32 -d [debugger-name] [program] [args...]'.
If you installed the GNU debugger, the debugger-name is gdb. There are other debuggers available at the Oak site; also, note that there are two versions of each, dpmi and non-dpmi, so use the correct one depending on your programming environment. Section 12 of the FAQ list explains more on debugging programs.
<p>
To debug programs in v2, type 'gdb [program.out] [args...]'. Make sure you built the program with the '-g' switch. [program.out] is not the exe but rather the
coff image. Read the FAQ list and gdb docs for more information on using gdb.
<p>
There's another tool that is very helpful in debugging crashed programs (v1.12 or v2) that produce a trace-back on the screen (GPF message and register dumps). Make sure the program was built with the '-g' switch, and the coff image and source files are in the same dir. Then type 'symify [program]' right after the program crashes and it'll show the line numbers in the source code where the program crashed.
<p>
<li><b>Profiling</b>
<p>
To profile your code (v1.12 or v2), build with the '-pg' switch, run your program, then run 'gprof [program.out]'. [program.out] should be the coff image, rather than exe. Note that for v1.12, gprof does <i>not</i> work under DPMI. Read the FAQ list and gprof docs for more information on this.
</ul>
<p>
<hr size=5>
<h3>Miscellaneous stuff</h3>
<p>
If you want to test whether your installation went smoothly, you can get the <i>djtst*.zip</i> file from the same place you got DJGPP from. Run the batch file and it will automatically do the compilation, linking, and testing.
<p>
People ask about IDE's, too. GNU Emacs has been ported to DOS, you might want to try that. I've also seen some nice enhanced editors/IDE's, try Aurora, Multi-Edit, or Boxer editor. I often use DOS Edit, with batch and make files. =)
<p>
There's a neat Borland-like IDE for DJGPP called RHIDE. Get it from <a href="http://www.tu-chemnitz.de/~rho/rhide.html">http://www.tu-chemnitz.de/~rho/rhide.html</a>.
<p>
Some more little tips: if your first program doesn't seem to want to compile/link, try doing <i>'set > myenv.txt'</i> at the prompt, and examine the <i>myenv.txt</i> file. See if your environment variables are properly set, as described here.
<p>
DJGPP might complain 'Out of virtual memory' in an OS/2 DOS box; it has happened to me before. Just right click to get to the DOS box properties, and increase (DPMI) memory OS/2 gives it. Mine is set to 'ENABLED' at 32MB.
<p>
Redirecting <i>stdout</i> doesn't work very well under a plain DOS shell. Try using a smarter shell such as 4DOS. There's also another solution to this problem using the <i>redir</i> program, search for it in the mail archives.
<p>
<hr size=5>
<p>
<h3>Where to get help on DJGPP</h3>
<p>
First, <i>read the FAQ list</i>; try to see if what you're looking for is already there.
<p>
There are online docs in DJGPP; they are in the txi*.zip package. If you installed it, just type 'info' to get into the top help node, or 'info [topic...]' to go directly to a particular topic. Use the Tab, space-bar, Return , 'n', 'p', 'u' keys, etc. to navigate between pages and topics. Press 'q' to quit.
<p>
There is also a DJGPP newsgroup on Usenet and a DJGPP mailing list. (I think mail goes through the newsgroup so you don't need to subsribe to both.) The newsgroup name is '<a href="news:comp.os.msdos.djgpp">comp.os.msdos.djgpp</a>'; to subsribe to the mailing list, send mail to <a href="mailto:listserv@delorie.com">listserv@delorie.com</a>, with no subject and write 'add [your e-mail address] djgpp' in the body. If you only want announcements, write 'add [your e-mail address] djgpp-announce.'
<p>
Another way to get more information on something is to search the mail-archives at the <a href="http://turnbull.sk.tsukuba.ac.jp/cgi-bin/search/">Turnbull site</a> or <a href="http://www.delorie.com/djgpp/mail-archives/">DJ's homepage</a>. I find many useful articles there.
<p>
<hr size=5>
<p>
<h3>Other DJGPP programs and libraries</h3>
<ul>
<li>There are a number of contributed programs in the djgpp dir at Simtel sites. Try browsing through the <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/">simtelnet</a>. The <a href="ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/00_index.txt">index file</a> lists all the files with their short descriptions.
<li>The <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/">djgpp2 dir at x2ftp.oulu.fi</a> also contains libs, mostly for graphics/game programming. The <a href="ftp://x2ftp.oulu.fi/pub/msdos/programming/djgpp2/00index.txt">index file</a> lists all the files with their short descriptions.
</ul>
<p>
<hr size=5>
Many thanks to DJ Delorie, Eli Zaretskii, Charles Sandmann and the rest of the DJGPP team!
<p>
10/31/96 icbm on EFNET IRC #c and #gamecode. 
<p>
Mail me corrections/suggestions/complaints/crap at <a href="mailto:avly@castle.net">avly@castle.net</a>
<p>
Copyright &copy; 1995-96 avly@castle.net All Rights Reserved
<p>
<em>All trademarks mentioned are of their respective companies.</em>
<h4> Standard Disclaimer</h4> 
There are absolutely no guarantees, expressed or implied, on anything that you find in this document. I cannot be held responsible for anything that results from the use or misuse of this document.  
</body>
</html>





































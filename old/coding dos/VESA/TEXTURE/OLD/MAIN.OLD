#include <i86.h>
#include <math.h>
#include <conio.h>
#include <fstream.h>
#include <iostream.h>
#include <time.h>
#include "\coding\watcom\xavstuff\h\video.h"
#include "\coding\watcom\XavStuff\h\fixed32.h"
//#include "assem.h"

float DistanceTable[65536];
unsigned short ScanBufferLeft[200];
unsigned short ScanBufferRight[200];
//unsigned char *Screen=(unsigned char *)0x0a0000;
unsigned char *Texture;
short ChangeX1,ChangeY1;
short ChangeX2,ChangeY2;
short MinY=399,MaxY=0;
float Ax=160,Ay=5,Bx=10,By=100,Cx=300,Cy=130,Dx=160,Dy=190;


 unsigned char *Buffer1,*Screen;
 unsigned char CurrentPal[256*3];
 int i,t;

#include "..\XavStuff\h\pcx.h"
PCXHeader HeaderInfo;


void MakeDistanceTable()
 {
 int i,t;
 for (i=0;i<256;i++)
  for (t=0;t<256;t++)
   DistanceTable[i*256+t]=(float) sqrt(i*i+t*t);
 }

void ScanConvert(Fixed x1,Fixed y1,Fixed x2,Fixed y2)   // To convert standard poly
 {
 Fixed mx;   // slope of x
 Fixed temp; // for swapping
 Fixed x,y;  // source x and y screen coordinates
 int TempX;  // Dark

 if(y1 > y2) // make sure that edge goes from top to bottom
  {
  temp=x1;  // we need to swap the coordinates around
  x1=x2;
  x2=temp;

  temp=y1;
  y1=y2;
  y2=temp;
  }

 if (y1<MinY)
  MinY=y1;
 if (y2>MaxY)
  MaxY=y2;

 if(y2!=y1 ) // initialize the slopes for stepping the edges
  mx = (Int2Fixed(x2-x1)) / (y2-y1); // dx/dy

 x=Int2Fixed(x1);
 for(y=y1;y<=y2;y++)
  {
   TempX=Fixed2Int(x);
   if (TempX<ScanBufferLeft[y])
     ScanBufferLeft[y]=TempX;
   if (TempX>ScanBufferRight[y])
     ScanBufferRight[y]=TempX;
  x+=mx;
  }
 }
void OrderPoints(int &Ax,int &Ay,int &Bx,int &By,int &Cx,int &Cy,int &Dx,int &Dy)
 {
 int Tx,Ty;
 if (Ay>By)
  {  Tx=Ax;Ty=Ay;Ax=Bx;Ay=By;Bx=Tx;By=Ty;  }
 if (By>Cy)
  {  Tx=Bx;Ty=By;Bx=Cx;By=Cy;Cx=Tx;Cy=Ty;  }
 if (Cy>Dy)
  {  Tx=Cx;Ty=Cy;Cx=Dx;Cy=Dy;Dx=Tx;Dy=Ty;  }
 if (By>Cy)
  {  Tx=Bx;Ty=By;Bx=Cx;By=Cy;Cx=Tx;Cy=Ty;  }
 if (Cy>Dy)
  {  Tx=Cx;Ty=Cy;Cx=Dx;Cy=Dy;Dx=Tx;Dy=Ty;  }
 }

void TexturePlot()
 {
 float TextureX=128,TextureY=128;
 int i,t,FS;
 float StartX,EndX,m,m1,SX=0,SY=0;
 float DXStep,GX,GY,TSX,TSY;
 float AB,AC;
// AB=TextureX/sqrt( (By-Ay)*(By-Ay)+(Bx-Ax)*(Bx-Ax) ); // Step in X of source
// AC=TextureY/sqrt( (Cy-Ay)*(Cy-Ay)+(Cx-Ax)*(Cx-Ax) );
 AB=TextureX/(By-Ay); // Step in X of source
 AC=TextureY/(Cy-Ay);
 if (Cy>=By)
   {
   for(i=Ay;i<By;i++)
    {
    StartX=ScanBufferLeft[i];
    EndX=ScanBufferRight[i];
//    m=sqrt((SX*SX)+(SY*SY)); // M=length of line in source
    m1=EndX-StartX; // M1=length of line in destnation
    DXStep=m1; // Number of pixels to move in source per destnation pixel
    GX=SX/DXStep;
    GY=-(SY/DXStep);
    TSX=0;
    TSY=SY;
    for(t=0;t<m1;t++)
     {
     Screen[(int) (t+StartX+i*320) ]=Buffer1[(int) ( TSX+(int)TSY*TextureX )&4095];
     TSX+=GX;
     TSY+=GY;
     }
    Screen[(int) (SX+((int)SY*320))]=128;
    SX+=AB; // Next X line in source
    SY+=AC; // Next Y line in source
    }
   if (Dy>Cy)
    {
    SX=0;
//    AB=TextureY/sqrt( (Dy-By)*(Dy-By)+(Dx-Bx)*(Dx-Bx) );
    AB=TextureY/(Dy-By);
    for(i=By;i<Cy;i++)
     {
     StartX=ScanBufferLeft[i];
     EndX=ScanBufferRight[i];
     m1=EndX-StartX; // M1=length of line in destnation
     DXStep=m1; // Number of pixels to move in source per destnation pixel
     GX=(SY-SX)/DXStep;
     GY=-(TextureY/DXStep);
     TSX=SX;
     TSY=TextureY;
     for(t=0;t<m1;t++)
      {
      Screen[(int) (t+StartX+i*320) ]=Buffer1[(int) ( TSX+(int)TSY*TextureX )&4095];
      TSX+=GX;
      TSY+=GY;
      }
     SX+=AB; // Next X line in source
     SY+=AC; // Next Y line in source
     }
    SY=0;
//    AB=TextureX/sqrt( (Dy-Cy)*(Dy-Cy)+(Dx-Cx)*(Dx-Cx) ); // Step in X of source
    AC=TextureX/(Dy-Cy); // Step in X of source
    for(i=Cy;i<Dy;i++)
     {
     StartX=ScanBufferLeft[i];
     EndX=ScanBufferRight[i];
//     m=sqrt((SX*SX)+(SY*SY)); // M=length of line in source
     m1=EndX-StartX; // M1=length of line in destnation
     DXStep=m1; // Number of pixels to move in source per destnation pixel
     GX=(TextureX-SX)/DXStep;
     GY=-(TextureY-SY)/DXStep;
     TSX=SX;
     TSY=TextureY;
     for(t=0;t<m1;t++)
      {
      Screen[(int) (t+StartX+i*320) ]=Buffer1[(int) ( TSX+(int)TSY*TextureX )&4095];
      TSX+=GX;
      TSY+=GY;
      }
     Screen[(int) (SX+((int)SY*320))]=128;
     SX+=AB; // Next X line in source
     SY+=AC; // Next Y line in source
     }

    }
   }
 }






void main ()
 {
 clock_t Start,End;
 int Frame=0;


 Screen=(unsigned char*)0x0a0000;
 Buffer1=new unsigned char[65536];

 GetPCXInfo(&HeaderInfo,"texture.PCX");
 GetPCXPicture(&HeaderInfo,"texture.PCX",Buffer1);
 GetPCXPalette(&HeaderInfo,"texture.PCX",CurrentPal);


 InitVideo();
 SetPalette(CurrentPal,0,256);

 Start=clock();

 for(i=0;i<200;i++)     // Initialises Scanbuffer
  {
  ScanBufferLeft[i]=320;
  ScanBufferRight[i]=0;
  }
 ScanConvert(Ax,Ay,Bx,By);
 ScanConvert(Ax,Ay,Cx,Cy);
 ScanConvert(Bx,By,Dx,Dy);
 ScanConvert(Cx,Cy,Dx,Dy);

 while(!kbhit())
 {
   TexturePlot();
    Frame++;
  }

 End=clock();
 KillVideo();
 cout << "Frame number :"<<Frame<<"   start,end :"<<Start<<" : "<<End<<endl;
 cout << "Frames Per Second = " << (Frame*CLOCKS_PER_SEC)/(End-Start)<<endl;
 cout << "\nCode By Dark Elf / Phobia"<<endl;
 }

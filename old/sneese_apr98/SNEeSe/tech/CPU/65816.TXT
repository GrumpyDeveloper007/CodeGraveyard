                 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                  The Real 65816 Processor Docs  V1.0
                 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                         Typed By Savoury SnaX


INTRODUCTION
------------

 Ok, before I begin I would like to greet the following people without
whom this information would perhaps not have been released.

 Yoshi - As always you provide information that no one can be without!
 Jonathan Turner & Jason l. Goldovitz - For making me get round to this!
 Mr Grim - You released code that shows the need for this ;-)

 Also note that this information is not magical, it has been compiled
from a 65816 programming manual and reworked to place the information
in one simple document.

 If there are any mistakes or additions that should be added please
email me detailing the changes so I can make them at :

                                        savoury.snax@usa.net

 Also if you find this information useful, a credit would be nice!


                       ODD CPU INFORMATION
                       -------------------

 This section has been written to deal with the quirks of the 65816 in
regards to other processors. It was placed at the start since it is the
sort of information most people are looking for. If you don't understand
a reference try looking ahead to a later section.

Stack Addressing
----------------

 When in native mode the stack may use memory locations $000000-00FFFF.
 The effective address of Stack, Stack Relative, and Stack Relative
Indirect Indexed addressing modes will always be within this range.
 In emulation mode, the stack address range is $000100-0001FF.
 The following opcodes and addressing modes will increment or decrement
beyond this range when accessing two or three bytes:

 JSL; JSR (a,x); PEA; PEI; PER; PHD; PLD; RTL; d,s; (d,s),y

Direct Addressing
-----------------

 The effective address generated by Direct; Direct,X and Direct,Y will
always be in the native mode range of $000000-00FFFF. When in emulation
mode, the direct addressing range is $000000-0000FF, except for [Direct]
and [Direct],Y addressing modes and the PEI instruction which will
increment from $0000FE or $0000FF into the stack area.
 When in emulation mode and DH is not zero, the direct addressing range
is $00DH00 to $00DHFF, except for [Direct] and [Direct],Y and the PEI
instruction which will increment from $00DHFE or $00DHFF into the
next page.
 When in emulation mode and DL is not zero, the direct addressing range
is $000000-00FFFF.

Absolute Indexed Addressing
---------------------------

 The Absolute indexed addressing modes are used to address data outside
the direct address range of $000000-00FFFF.

All Opcodes Function In All Modes Of Operation
----------------------------------------------

 However the following instructions have limited use in emulation mode:

 REP and SEP instructions cannot modify the m & x bits.
 MVN and MVP can only move data within the range $0000-$00FF in both
the source bank and the destination bank.

Absolute Jumps
--------------

 Absolute jumps use the Program Bank and not the Data Bank when forming
the address to jump to.

Indirect Jumps
--------------

 The JMP (a) and JML (a) instructions use the direct bank for indirect
addressing, while JMP (a,x) and JSR (a,x) use the program bank for
indirect address tables.

Switching Modes
---------------

 see XCE at bottom of document.

The x Flag
----------

 When the x flag is set the X & Y registers become 8 bit. When the x
flag is cleared the high byte of the X and Y registers becomes 0. This
clearing does not happen with the m flag.

                        THE CPU REGISTERS
                        -----------------

 Coming Soon........


                     THE CPU ADDRESSING MODES
                     ------------------------

 Coming Soon........

                     THE CPU INSTRUCTION SET  
                     -----------------------  


ADC - Add with Carry
--------------------

 Performs addition of data located at the effective address with the
contents of the accumulator, the result is stored in the accumulator.
If the d flag is clear then binary addition is performed, otherwise
decimal addition (BCD) is performed. If the c flag is set then one
is added to the result.

Flags Affected:  n v - - - - z c
                 n Set if result is negative, else cleared
                 v Set if signed overflow occured, else cleared
                 z Set if result is zero, else cleared
                 c Set if unsigned overflow, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       ADC #const      69      2*      2 (a)
Absolute                        ADC addr        6D      3       4 (a)
Absolute Long                   ADC long        6F      4       5 (a)
Direct Page (DP)                ADC dp          65      2       3 (a,b)
DP Indirect                     ADC (dp)        72      2       5 (a,b)
DP Indirect Long                ADC [dp]        67      2       6 (a,b)
Absolute Indexed X              ADC addr,X      7D      3       4 (a,c)
Absolute Long Indexed X         ADC long,X      7F      4       5 (a)
Absolute Indexed Y              ADC addr,Y      79      3       4 (a,c)
DP Indexed X                    ADC dp,X        75      2       4 (a,b)
DP Indexed Indirect X           ADC (dp,X)      61      2       6 (a,b)
DP Indirect Indexed Y           ADC (dp),Y      71      2       5 (a,b,c)
DP Indirect Long Indexed Y      ADC [dp],Y      77      2       6 (a,b)
Stack Relative (SR)             ADC sr,S        63      2       4 (a)
SR Indirect Indexed Y           ADC (sr,S),Y    73      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


AND - Bitwise AND Accumulator with Memory
-----------------------------------------

 Performs a bitwise AND of data located at the effective address with the
contents of the accumulator, the result is stored in the accumulator.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       AND #const      29      2*      2 (a)
Absolute                        AND addr        2D      3       4 (a)
Absolute Long                   AND long        2F      4       5 (a)
Direct Page (DP)                AND dp          25      2       3 (a,b)
DP Indirect                     AND (dp)        32      2       5 (a,b)
DP Indirect Long                AND [dp]        27      2       6 (a,b)
Absolute Indexed X              AND addr,X      3D      3       4 (a,c)
Absolute Long Indexed X         AND long,X      3F      4       5 (a)
Absolute Indexed Y              AND addr,Y      39      3       4 (a,c)
DP Indexed X                    AND dp,X        35      2       4 (a,b)
DP Indexed Indirect X           AND (dp,X)      21      2       6 (a,b)
DP Indirect Indexed Y           AND (dp),Y      31      2       5 (a,b,c)
DP Indirect Long Indexed Y      AND [dp],Y      37      2       6 (a,b)
Stack Relative (SR)             AND sr,S        23      2       4 (a)
SR Indirect Indexed Y           AND (sr,S),Y    33      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


ASL - Shift Memory Or Accumulator Left
--------------------------------------

 Shift the contents of the location specified left by one bit. The most
significant bit is transfered to the carry flag. The right most bit is
cleared.

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if MSB bit set, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     ASL A           0A      1       2
Absolute                        ASL addr        0E      3       6 (a)
Direct Page (DP)                ASL dp          06      2       5 (a,b)
Absolute Indexed X              ASL addr,X      1E      3       7 (a)
DP Indexed X                    ASL dp,X        16      2       6 (a,b)

a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


BCC - Branch if Carry Clear
---------------------------

 If c flag is clear then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BCC nearlabel   90      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BCS - Branch if Carry Set
-------------------------

 If c flag is set then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BCS nearlabel   B0      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BEQ - Branch if Equal
---------------------

 If z flag is set then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BEQ nearlabel   F0      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BIT - Test Memory Bits against Accumulator
------------------------------------------

 Bit sets the flags based on two different operations. It has no
effect on the accumulator or the data at the effective address.
 First the MSB of the data at the effective address is copied into the
n flag and the bit to its right is copied into the v flag. ie if m=0 bit
15 is copied to n and bit 14 is copied to v, else if m=1 bit 7 is copied
to n and bit 6 is copied to v.
 Secondly the data at the effective address is logically ANDed with the
accumulator setting the z flag if the result is zero, else clearing it.

Flags Affected:  n v - - - - z - (Other than Immediate Addressing)
                 - - - - - - z - (Immediate Addressing Only)
                 n Takes value of most significant bit of data
                 v Takes value of next to highest bit of data
                 z Set if accumulator AND data is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       BIT #const      89      2*      2 (a)
Absolute                        BIT addr        2C      3       4 (a)
Direct Page (DP)                BIT dp          24      2       3 (a,b)
Absolute Indexed X              BIT addr,X      3C      3       4 (a,c)
DP Indexed X                    BIT dp,X        34      2       4 (a,b)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


BMI - Branch if Minus
---------------------

 If n flag is set then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BMI nearlabel   30      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BNE - Branch if Not Equal
-------------------------

 If z flag is clear then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BNE nearlabel   D0      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BPL - Branch if Plus
--------------------

 If n flag is clear then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BPL nearlabel   10      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BRA - Branch Always
-------------------

 The byte following is sign extended to 16 bits and added to the program
counter performing a branch. Otherwise execution continues at the next
instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BRA nearlabel   80      2       3 (a)

a Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BRK - Software Break
--------------------

 Force a software interrupt. BRK is unaffected by the i flag.
 Although BRK is a one-byte instruction, the program counter (which
is pushed onto the stack by the instruction) is incremented by two.

 In emulation mode (e=1). The program counter is incremented by two,
then pushed onto the stack. The b flag is set and the flags register
is then pushed onto the stack. The i flag is set and the d flag is
cleared. The program counter is then loaded with the interrupt
vector at $FFFE-FFFF.

 In native mode (e=0). The program bank register is pushed onto the stack.
The program counter is incremented by two, then pushed onto the stack. The
flags register is pushed onto the stack. The i flag is set and the d flag
is cleared. The program bank is set to zero and the program counter is
loaded with the interrupt vector at $00FFE6-00FFE7.

Flags Affected:  - - - b d i - - (Emulation mode)
                 - - - - d i - - (Native mode)
                 b The b flag on the stack is set
                 d The d flag is cleared
                 i The i flag is set

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack / Interrupt               BRK             00      2*      7 (a)

* BRK is 1 byte, but program counter is incremented by two
a Add 1 cycle if native mode (e=0)


BRL - Branch Always Long
------------------------

 The word following is added to the program counter performing a branch.
NB the word is a signed number (-32768 to 32767).
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative Long   BRL label       82      3       4


BVC - Branch if Overflow Clear
------------------------------

 If v flag is clear then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BVC nearlabel   50      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


BVS - Branch if Overflow Set
----------------------------

 If v flag is set then the byte following is sign extended to 16 bits
and added to the program counter performing a branch. Otherwise execution
continues at the next instruction.
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Program Counter Relative        BVS nearlabel   70      2       2 (a,b)

a Add 1 cycle if branch taken
b Add 1 cycle if branch taken crosses page boundary in emulation mode (e=1)


CLC - Clear Carry Flag
----------------------

 Clear the c flag.

Flags Affected:  - - - - - - - c
                 c Carry flag cleared always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         CLC             18      1       2      


CLD - Clear Decimal Flag
------------------------

 Clear the d flag.

Flags Affected:  - - - - d - - -
                 d Decimal flag cleared always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         CLD             D8      1       2      


CLI - Clear Interrupt Disable Flag
----------------------------------

 Clear the i flag.

Flags Affected:  - - - - - i - -
                 i Interrupt disable flag cleared always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         CLI             58      1       2      


CLV - Clear Overflow Flag
-------------------------

 Clear the v flag.

Flags Affected:  - v - - - - - -
                 v Overflow flag cleared always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         CLV             B8      1       2      


CMP - Compare Accumulator with Memory
-------------------------------------

 Performs subtraction of data located at the effective address from the
contents of the accumulator, the flags are set based on the result but
the accumulator and the memory are not affected.
NB Carry is set if borrow is not required (this is the opposite of
many processors).

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if no borrow required, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       CMP #const      C9      2*      2 (a)
Absolute                        CMP addr        CD      3       4 (a)
Absolute Long                   CMP long        CF      4       5 (a)
Direct Page (DP)                CMP dp          C5      2       3 (a,b)
DP Indirect                     CMP (dp)        D2      2       5 (a,b)
DP Indirect Long                CMP [dp]        C7      2       6 (a,b)
Absolute Indexed X              CMP addr,X      DD      3       4 (a,c)
Absolute Long Indexed X         CMP long,X      DF      4       5 (a)
Absolute Indexed Y              CMP addr,Y      D9      3       4 (a,c)
DP Indexed X                    CMP dp,X        D5      2       4 (a,b)
DP Indexed Indirect X           CMP (dp,X)      C1      2       6 (a,b)
DP Indirect Indexed Y           CMP (dp),Y      D1      2       5 (a,b,c)
DP Indirect Long Indexed Y      CMP [dp],Y      D7      2       6 (a,b)
Stack Relative (SR)             CMP sr,S        C3      2       4 (a)
SR Indirect Indexed Y           CMP (sr,S),Y    D3      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


COP - Co-Processor Enabled
--------------------------

 Force a software interrupt, similar to BRK. COP is unaffected by the i flag.
 Although COP is a one-byte instruction, the program counter (which
is pushed onto the stack by the instruction) is incremented by two.

 In emulation mode (e=1). The program counter is incremented by two,
then pushed onto the stack. The flags register is then pushed onto
the stack. The i flag is set and the d flag is cleared. The program
counter is then loaded with the interrupt vector at $FFF4-FFF5.

 In native mode (e=0). The program bank register is pushed onto the stack.
The program counter is incremented by two, then pushed onto the stack. The
flags register is pushed onto the stack. The i flag is set and the d flag
is cleared. The program bank is set to zero and the program counter is
loaded with the interrupt vector at $00FFE4-00FFE5.

Flags Affected:  - - - - d i - -
                 d The d flag is cleared
                 i The i flag is set

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack / Interrupt               COP const       02      2*      7 (a)

* COP is 1 byte, but program counter is incremented by two
a Add 1 cycle if native mode (e=0)


CPX - Compare Index Register X with Memory
------------------------------------------

 Performs subtraction of data located at the effective address from the
contents of the X index register, the flags are set based on the result but
the X index register and the memory are not affected.
NB Carry is set if borrow is not required (this is the opposite of
many processors).

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if no borrow required, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       CPX #const      E0      2*      2 (a)
Absolute                        CPX addr        EC      3       4 (a)
Direct Page (DP)                CPX dp          E4      2       3 (a,b)

* Add 1 byte if x=0 (16-bit memory / accumulator)
a Add 1 cycle if x=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


CPY - Compare Index Register Y with Memory
------------------------------------------

 Performs subtraction of data located at the effective address from the
contents of the Y index register, the flags are set based on the result but
the Y index register and the memory are not affected.
NB Carry is set if borrow is not required (this is the opposite of
many processors).

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if no borrow required, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       CPY #const      C0      2*      2 (a)
Absolute                        CPY addr        CC      3       4 (a)
Direct Page (DP)                CPY dp          C4      2       3 (a,b)

* Add 1 byte if x=0 (16-bit memory / accumulator)
a Add 1 cycle if x=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


DEC - Decrement                      
---------------

 Decrement by one the contents of the location specified by the operand.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     DEC A           3A      1       2
Absolute                        DEC addr        CE      3       6 (a)
Direct Page (DP)                DEC dp          C6      2       5 (a,b)
Absolute Indexed X              DEC addr,X      DE      3       7 (a)
DP Indexed X                    DEC dp,X        D6      2       6 (a,b)

a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


DEX - Decrement Index Register X
--------------------------------

 Decrement by one the contents of the index register X.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         DEX             CA      1       2


DEY - Decrement Index Register Y
--------------------------------

 Decrement by one the contents of the index register Y.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         DEY             88      1       2


EOR - Exclusive-OR Accumulator with Memory
------------------------------------------

 Bitwise logical EOR the data located at the effective address specified
by the operand with the contents of the accumulator.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       EOR #const      49      2*      2 (a)
Absolute                        EOR addr        4D      3       4 (a)
Absolute Long                   EOR long        4F      4       5 (a)
Direct Page (DP)                EOR dp          45      2       3 (a,b)
DP Indirect                     EOR (dp)        52      2       5 (a,b)
DP Indirect Long                EOR [dp]        47      2       6 (a,b)
Absolute Indexed X              EOR addr,X      5D      3       4 (a,c)
Absolute Long Indexed X         EOR long,X      5F      4       5 (a)
Absolute Indexed Y              EOR addr,Y      59      3       4 (a,c)
DP Indexed X                    EOR dp,X        55      2       4 (a,b)
DP Indexed Indirect X           EOR (dp,X)      41      2       6 (a,b)
DP Indirect Indexed Y           EOR (dp),Y      51      2       5 (a,b,c)
DP Indirect Long Indexed Y      EOR [dp],Y      57      2       6 (a,b)
Stack Relative (SR)             EOR sr,S        43      2       4 (a)
SR Indirect Indexed Y           EOR (sr,S),Y    53      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


INC - Increment                      
---------------

 Increment by one the contents of the location specified by the operand.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     INC A           1A      1       2
Absolute                        INC addr        EE      3       6 (a)
Direct Page (DP)                INC dp          E6      2       5 (a,b)
Absolute Indexed X              INC addr,X      FE      3       7 (a)
DP Indexed X                    INC dp,X        F6      2       6 (a,b)

a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


INX - Increment Index Register X
--------------------------------

 Increment by one the contents of the index register X.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         INX             E8      1       2


INY - Increment Index Register Y
--------------------------------

 Increment by one the contents of the index register Y.
 The d flag has no affect on this instruction.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         INY             C8      1       2


JMP - Jump
----------

 Transfer control to the address specified by the operand field.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        JMP addr        4C      3       3
Absolute Indirect               JMP (addr)      6C      3       5
Absolute Indexed Indirect       JMP (addr,X)    7C      3       6
Absolute Long                   JMP long        5C      4       4
                                (or JML long)
Absolute Indirect Long          JMP [addr]      DC      3       6
                                (or JML [addr])


JSL - Jump to Subroutine Long
-----------------------------

 Push the program counter bank onto the stack, and then push the
high byte of the return address, then the low byte of the return
address. Then the program counter is loaded with the address
specified by the operand field.
NB The return address is the address of the fourth instruction
byte not the next instruction like most processors.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute Long                   JSL long        22      4       8
                                (or JSR long)


JSR - Jump to Subroutine
------------------------

 Push the high byte of the return address, then the low byte of
the return address. Then the program counter is loaded with the
address specified by the operand field.
NB The return address is the address of the third instruction
byte not the next instruction like most processors.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        JSR addr        20      3       6
Absolute Indexed Indirect       JSR (addr,X)    FC      3       8


LDA - Load Accumulator from Memory
----------------------------------

 Load the accumulator with the data located at the effective address
specified by the operand.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       LDA #const      A9      2*      2 (a)
Absolute                        LDA addr        AD      3       4 (a)
Absolute Long                   LDA long        AF      4       5 (a)
Direct Page (DP)                LDA dp          A5      2       3 (a,b)
DP Indirect                     LDA (dp)        B2      2       5 (a,b)
DP Indirect Long                LDA [dp]        A7      2       6 (a,b)
Absolute Indexed X              LDA addr,X      BD      3       4 (a,c)
Absolute Long Indexed X         LDA long,X      BF      4       5 (a)
Absolute Indexed Y              LDA addr,Y      B9      3       4 (a,c)
DP Indexed X                    LDA dp,X        B5      2       4 (a,b)
DP Indexed Indirect X           LDA (dp,X)      A1      2       6 (a,b)
DP Indirect Indexed Y           LDA (dp),Y      B1      2       5 (a,b,c)
DP Indirect Long Indexed Y      LDA [dp],Y      B7      2       6 (a,b)
Stack Relative (SR)             LDA sr,S        A3      2       4 (a)
SR Indirect Indexed Y           LDA (sr,S),Y    B3      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


LDX - Load Index Register X from Memory
---------------------------------------

 Load index register X with the data located at the effective address
specified by the operand.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       LDX #const      A2      2*      2 (a)
Absolute                        LDX addr        AE      3       4 (a)
Direct Page (DP)                LDX dp          A6      2       3 (a,b)
Absolute Indexed Y              LDX addr,Y      BE      3       4 (a,c)
DP Indexed Y                    LDX dp,Y        B6      2       4 (a,b)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


LDY - Load Index Register Y from Memory
---------------------------------------

 Load index register Y with the data located at the effective address
specified by the operand.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       LDY #const      A0      2*      2 (a)
Absolute                        LDY addr        AC      3       4 (a)
Direct Page (DP)                LDY dp          A4      2       3 (a,b)
Absolute Indexed X              LDY addr,X      BC      3       4 (a,c)
DP Indexed X                    LDY dp,X        B4      2       4 (a,b)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


LSR - Shift Memory Or Accumulator Right
--------------------------------------

 Shift the contents of the location specified right by one bit. The least
significant bit is transfered to the carry flag. The left most bit is
cleared.

Flags Affected:  n - - - - - z c
                 n Cleared
                 z Set if result is zero, else cleared
                 c Set if LSB bit set, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     LSR A           4A      1       2
Absolute                        LSR addr        4E      3       6 (a)
Direct Page (DP)                LSR dp          46      2       5 (a,b)
Absolute Indexed X              LSR addr,X      5E      3       7 (a)
DP Indexed X                    LSR dp,X        56      2       6 (a,b)

a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


MVN - Block Move Next
---------------------

 Moves (copies) a block of memory to a new location.
 The destination address for MVN is the first operand byte (this is the
bank byte) and the Y index register.
 The source address for MVN is the second operand byte (this is the
bank byte) and the X index register.
 The length to copy (minus 1) is in the C accumulator (regardless of the
setting of the m flag or the e flag) ie if C contains 5 then six bytes
are moved.
 The execution sequence is : A byte is moved from the source address to
the destination address. X and Y are incremented, C is decremented. If C
is $FFFF then the operation stops.
 When execution is complete X and Y point to one byte past the block
moved and C holds $FFFF, also the destination bank byte is copied into
the Data Bank Register.
NB if the x flag is set or the e flag is set then the block must lie
in the zero page since the high part of X and Y are zero. Remember the
m and e flags have no affect on the accumulator, its always a word
value.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Block Move                      MVN src,dst     54      3       *

* 7 cylces per byte moved


MVP - Block Move Previous
-------------------------

 Moves (copies) a block of memory to a new location.
 The destination address for MVP is the first operand byte (this is the
bank byte) and the Y index register.
 The source address for MVP is the second operand byte (this is the
bank byte) and the X index register.
 The length to copy (minus 1) is in the C accumulator (regardless of the
setting of the m flag or the e flag) ie if C contains 5 then six bytes
are moved.
 The execution sequence is : A byte is moved from the source address to
the destination address. X and Y are decremented, C is decremented. If C
is $FFFF then the operation stops.
 When execution is complete X and Y point to one byte past the block
moved and C holds $FFFF, also the destination bank byte is copied into
the Data Bank Register.
NB if the x flag is set or the e flag is set then the block must lie
in the zero page since the high part of X and Y are zero. Remember the
m and e flags have no affect on the accumulator, its always a word
value.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Block Move                      MVP src,dst     44      3       *

* 7 cylces per byte moved


NOP - No Operation
------------------

 This does nothing except increment the program counter by one.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         NOP             EA      1       2


ORA - OR Accumulator with Memory
--------------------------------

 Bitwise logical OR the data located at the effective address specified
by the operand with the contents of the accumulator.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       ORA #const      09      2*      2 (a)
Absolute                        ORA addr        0D      3       4 (a)
Absolute Long                   ORA long        0F      4       5 (a)
Direct Page (DP)                ORA dp          05      2       3 (a,b)
DP Indirect                     ORA (dp)        12      2       5 (a,b)
DP Indirect Long                ORA [dp]        07      2       6 (a,b)
Absolute Indexed X              ORA addr,X      1D      3       4 (a,c)
Absolute Long Indexed X         ORA long,X      1F      4       5 (a)
Absolute Indexed Y              ORA addr,Y      19      3       4 (a,c)
DP Indexed X                    ORA dp,X        15      2       4 (a,b)
DP Indexed Indirect X           ORA (dp,X)      01      2       6 (a,b)
DP Indirect Indexed Y           ORA (dp),Y      11      2       5 (a,b,c)
DP Indirect Long Indexed Y      ORA [dp],Y      17      2       6 (a,b)
Stack Relative (SR)             ORA sr,S        03      2       4 (a)
SR Indirect Indexed Y           ORA (sr,S),Y    13      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


PEA - Push Effective Absolute Address
-------------------------------------

 This pushes the operand word onto the stack, it should probably have
been called Push immediate word or something to be less confusing.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Absolute)                PEA addr        F4      3       5


PEI - Push Effective Indirect Address
-------------------------------------

 This pushes the word located at the address formed by adding the direct
page offset specified by the operand to the direct page register. This
could be considered as Push direct indirect address.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (DP Indirect)             PEI (dp)        D4      2       6 (a)

a Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


PER - Push Effective PC Relative Indirect Address
-------------------------------------------------

 The word following is added to the program counter then pushed onto the
stack. NB the word is a signed number (-32768 to 32767).
NB the program counter used in the addition is the address of the next
instruction.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (PC Relative Long)        PER label       62      3       6


PHA - Push Accumulator
----------------------

 This pushes the accumulator onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHA             48      1       3 (a)

a Add 1 cycle if m=0 (16 bit memory / accumulator)


PHB - Push Data Bank Register
-----------------------------

 This pushes the Data Bank Register onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHB             8B      1       3


PHD - Push Direct Page Register
-------------------------------

 This pushes the Direct Page Register onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHD             0B      1       4


PHK - Push Program Bank Register
--------------------------------

 This pushes the Program Bank Register onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHK             4B      1       3


PHP - Push Flags Register
-------------------------

 This pushes the Flags Register onto the stack.
NB This does not push the e flag.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHP             08      1       3


PHX - Push Index Register X
---------------------------

 This pushes Index Register X onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHX             DA      1       3 (a)

a Add 1 cycle if x=0 (16 bit index registers)


PHY - Push Index Register Y
---------------------------

 This pushes Index Register Y onto the stack.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Push)                    PHY             5A      1       3 (a)

a Add 1 cycle if x=0 (16 bit index registers)


PLA - Pull Accumulator
----------------------

 This pulls the accumulator from the stack.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLA             68      1       4 (a)

a Add 1 cycle if m=0 (16 bit memory / accumulator)


PLB - Pull Data Bank Register
-----------------------------

 This pulls the Data Bank Register from the stack.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLB             AB      1       4


PLD - Pull Direct Page Register
-------------------------------

 This pulls the Direct Page Register from the stack.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLD             2B      1       5


PLP - Pull Flags Register
-------------------------

 This pulls the Flags Register from the stack.
NB This does not push the e flag.

Flags Affected:  n v - b d i z c (Emulation mode e=1)
                 n v m x d i z c (Native mode e=0)
                 All flags replaced by values from the byte off the stack

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLP             28      1       4


PLX - Pull Index Register X
---------------------------

 This pulls Index Register X from the stack.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLX             FA      1       4 (a)

a Add 1 cycle if x=0 (16 bit index registers)


PLY - Pull Index Register Y
---------------------------

 This pulls Index Register Y from the stack.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    PLY             7A      1       4 (a)

a Add 1 cycle if x=0 (16 bit index registers)


REP - Reset Status Bits
-----------------------

 For each bit set in the operand byte, clear the corresponding bit in the
Flags register.

Flags Affected:  n v - - d i z c (Emulation mode e=1)
                 n v m x d i z c (Native mode e=0)
                 All flags for which an operand byte is set are cleared
                 All other flags are unaffected

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       REP #const      C2      2       3


ROL - Rotate Memory Or Accumulator Left
---------------------------------------

 Rotates the contents of the location specified by the operand left by
one bit. The right most bit takes the value of carry flag, the left most
bit rotated out is transfered to the carry flag.

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if MSB bit set, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     ROL A           2A      1       2
Absolute                        ROL addr        2E      3       6 (a)
Direct Page (DP)                ROL dp          26      2       5 (a,b)
Absolute Indexed X              ROL addr,X      3E      3       7 (a)
DP Indexed X                    ROL dp,X        36      2       6 (a,b)

a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


ROR - Rotate Memory Or Accumulator Right
----------------------------------------

 Rotates the contents of the location specified by the operand right by
one bit. The left most bit takes the value of carry flag, the right most
bit rotated out is transfered to the carry flag.

Flags Affected:  n - - - - - z c
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared
                 c Set if LSB bit set, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Accumulator                     ROR A           6A      1       2
Absolute                        ROR addr        6E      3       6 (a)
Direct Page (DP)                ROR dp          66      2       5 (a,b)
Absolute Indexed X              ROR addr,X      7E      3       7 (a)
DP Indexed X                    ROR dp,X        76      2       6 (a,b)
                                   
a Add 2 cycles if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


RTI - Return From Interrupt
---------------------------

 This is used to return from an interrupt (Software Or Hardware).

 In emulation mode (e=1): The flags register is pulled from the stack,
then the program counter is pulled.
 In native mode (e=0): The flags register is pulled from the stack,
then the program counter is pulled and finally the program bank register
is pulled.

NB unlike RTS the return address (on the stack) is the exact address to
return to (no need to increment it).

Flags Affected:  n v - - d i z c (Emulation mode e=1)
                 n v m x d i z c (Native mode e=0)
                 All flags replaced by values from the flag byte off the stack

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    RTI             40      1       6 (a)

a Add 1 cycle if in native mode (e=0)


RTL - Return From Subroutine Long
---------------------------------

 This is used to return from a subroutine call (INTER-BANK).

 The program counter is pulled off the stack then incremented, then
the program bank register is pulled off the stack.

NB Remember the program counter is incremented by one.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    RTL             6B      1       6


RTS - Return From Subroutine
----------------------------

 This is used to return from a subroutine call.

 The program counter is pulled off the stack then incremented.

NB Remember the program counter is incremented by one.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Stack (Pull)                    RTS             60      1       6


SBC - Subtract with Borrow from Accumulator
-------------------------------------------

 Performs subtraction of data located at the effective address from the
contents of the accumulator, subtract one more if the c flag is clear,
the result is stored in the accumulator.
If the d flag is clear then binary subtraction is performed, otherwise
decimal subtraction (BCD) is performed.

NB Carry is set if borrow is not required (this is the opposite of
many processors).

Flags Affected:  n v - - - - z c
                 n Set if result is negative, else cleared
                 v Set if signed overflow, else cleared
                 z Set if result is zero, else cleared
                 c Set if no borrow required, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       SBC #const      E9      2*      2 (a)
Absolute                        SBC addr        ED      3       4 (a)
Absolute Long                   SBC long        EF      4       5 (a)
Direct Page (DP)                SBC dp          E5      2       3 (a,b)
DP Indirect                     SBC (dp)        F2      2       5 (a,b)
DP Indirect Long                SBC [dp]        E7      2       6 (a,b)
Absolute Indexed X              SBC addr,X      FD      3       4 (a,c)
Absolute Long Indexed X         SBC long,X      FF      4       5 (a)
Absolute Indexed Y              SBC addr,Y      F9      3       4 (a,c)
DP Indexed X                    SBC dp,X        F5      2       4 (a,b)
DP Indexed Indirect X           SBC (dp,X)      E1      2       6 (a,b)
DP Indirect Indexed Y           SBC (dp),Y      F1      2       5 (a,b,c)
DP Indirect Long Indexed Y      SBC [dp],Y      F7      2       6 (a,b)
Stack Relative (SR)             SBC sr,S        E3      2       4 (a)
SR Indirect Indexed Y           SBC (sr,S),Y    F3      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)
c Add 1 cycle if adding index crosses a page boundary


SEC - Set Carry Flag
--------------------

 Set the c flag.

Flags Affected:  - - - - - - - c
                 c Carry flag set always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         SEC             38      1       2      


SED - Set Decimal Flag
----------------------

 Set the d flag.

Flags Affected:  - - - - d - - -
                 d Decimal flag set always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         SED             F8      1       2      


SEI - Set Interrupt Disable Flag
--------------------------------

 Set the i flag.

Flags Affected:  - - - - - i - -
                 i Interrupt disable flag set always

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         CLI             78      1       2      


SEP - Set Status Bits
---------------------

 For each bit set in the operand byte, set the corresponding bit in the
Flags register.

Flags Affected:  n v - - d i z c (Emulation mode e=1)
                 n v m x d i z c (Native mode e=0)
                 All flags for which an operand byte is set are set
                 All other flags are unaffected

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Immediate                       SEP #const      E2      2       3


STA - Store Accumulator to Memory
---------------------------------

 Store the value in the accumulator to the effective address specified
by the operand.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        STA addr        8D      3       4 (a)
Absolute Long                   STA long        8F      4       5 (a)
Direct Page (DP)                STA dp          85      2       3 (a,b)
DP Indirect                     STA (dp)        92      2       5 (a,b)
DP Indirect Long                STA [dp]        87      2       6 (a,b)
Absolute Indexed X              STA addr,X      9D      3       5 (a)
Absolute Long Indexed X         STA long,X      9F      4       5 (a)
Absolute Indexed Y              STA addr,Y      99      3       5 (a)
DP Indexed X                    STA dp,X        95      2       4 (a,b)
DP Indexed Indirect X           STA (dp,X)      81      2       6 (a,b)
DP Indirect Indexed Y           STA (dp),Y      91      2       6 (a,b)
DP Indirect Long Indexed Y      STA [dp],Y      97      2       6 (a,b)
Stack Relative (SR)             STA sr,S        83      2       4 (a)
SR Indirect Indexed Y           STA (sr,S),Y    93      2       7 (a)

* Add 1 byte if m=0 (16-bit memory / accumulator)
a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


STP - Stop the Processor
------------------------

 Stop processor until Reset. Effectively this is useful only in hardware
systems.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         STP             DB      1       3 (a)

a Uses 3 cycles to shut processor down; additional cycles required for reset.


STX - Store Index Register X to Memory
--------------------------------------

 Store the value in index register X to the effective address specified
by the operand.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        STX addr        8E      3       4 (a)
Direct Page (DP)                STX dp          86      2       3 (a,b)
DP Indexed Y                    STX dp,Y        96      2       4 (a,b)

a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


STY - Store Index Register Y to Memory
--------------------------------------

 Store the value in index register Y to the effective address specified
by the operand.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        STY addr        8C      3       4 (a)
Direct Page (DP)                STY dp          84      2       3 (a,b)
DP Indexed X                    STY dp,X        94      2       4 (a,b)

a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


STZ - Store Zero to Memory
--------------------------

 Store zero to the effective address specified by the operand.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        STZ addr        9C      3       4 (a)
Direct Page (DP)                STZ dp          64      2       3 (a,b)
Absolute Indexed X              STZ addr,X      9E      3       5 (a)
DP Indexed X                    STZ dp,X        74      2       4 (a,b)

a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


TAX - Transfer Accumulator to Index Register X
----------------------------------------------

 Transfer the value in the accumulator to index register X. If the
registers are different sizes, the destination determines the size of
the transfer.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TAX             AA      1       2


TAY - Transfer Accumulator to Index Register Y
----------------------------------------------

 Transfer the value in the accumulator to index register Y. If the
registers are different sizes, the destination determines the size of
the transfer.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TAY             A8      1       2


TCD - Transfer 16 bit Accumulator to Direct Page Register
---------------------------------------------------------

 Transfer the 16 bit Accumulator to the Direct Page Register, the
transfer size will always be 16 bits.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TCD             5B      1       2


TCS - Transfer Accumulator to Stack Pointer
-------------------------------------------

 Transfer the Accumulator to the Stack Pointer.
 16 bits is transfered unless in emulation mode (e=1), when only the low
part is transfered due to the stacks high part being forced to 1.
NB the m flag has no affect on the transfer size.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TCS             1B      1       2
                                (or TAS)


TDC - Transfer Direct Page register to 16 bit Accumulator
---------------------------------------------------------

 Transfer the Direct Page Register to the 16 bit Accumulator, the
transfer size will always be 16 bits.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TDC             7B      1       2


TRB - Test and Reset Memory Bits Against Accumulator
----------------------------------------------------

 Logically AND together the complement of the value in the accumulator
with the data at the effective address specified by the operand. Storing
the result at the memory location.
NB The z flag is set based on a second (different) operation, ANDing of
the accumulator (not complemented) and the data. The result is not
saved only whether it was zero or not.
 
Flags Affected:  - - - - - - z -
                 z Set if memory AND accumulator is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        TRB addr        1C      3       6 (a)
Direct Page (DP)                TRB dp          14      2       5 (a,b)

a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


TSB - Test and Set Memory Bits Against Accumulator
--------------------------------------------------

 Logically OR together the value in the accumulator with the data at the
effective address specified by the operand. Storing the result at the
memory location.
NB The z flag is set based on a second (different) operation, ANDing of
the accumulator and the data. The result is not saved only whether it
was zero or not.
 
Flags Affected:  - - - - - - z -
                 z Set if memory AND accumulator is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Absolute                        TSB addr        0C      3       6 (a)
Direct Page (DP)                TSB dp          04      2       5 (a,b)

a Add 1 cycle if m=0 (16-bit memory / accumulator)
b Add 1 cycle if low byte of Direct Page register is other than zero (DL<>0)


TSC - Transfer Stack Pointer to 16 bit Accumulator
--------------------------------------------------

 Transfer the Stack Pointer to the 16 bit Accumulator, the transfer size
will always be 16 bits.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TSC             3B      1       2
                                (or TSA)


TSX - Transfer Stack Pointer to Index Register X
------------------------------------------------

 Transfer the Stack Pointer to index register X. If the x flag is set
then only the low byte is transferred, else the whole 16 bits are
transferred.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TSX             BA      1       2


TXA - Transfer Index Register X to Accumulator
----------------------------------------------

 Transfer the value in index register X to the accumulator. If the
registers are different sizes, the destination determines the size of
the transfer.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TXA             8A      1       2


TXS - Transfer Index Register X to Stack Pointer
------------------------------------------------

 Transfer index register X to the Stack Pointer.
 In emulation mode (e=1) only the low byte is transferred.
 In native mode with 8 bit index (e=0,x=1) the low byte is transferred
and the high byte is zeroed.
 In native mode with 16 bit index (e=0,x=0) the full sixteen bits are
transferred.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TXS             9A      1       2


TXY - Transfer Index Register X to Index Register Y
---------------------------------------------------

 Transfer the value in index register X to index register Y.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TXY             9B      1       2


TYA - Transfer Index Register Y to Accumulator
----------------------------------------------

 Transfer the value in index register Y to the accumulator. If the
registers are different sizes, the destination determines the size of
the transfer.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TYA             98      1       2


TYX - Transfer Index Register Y to Index Register X
---------------------------------------------------

 Transfer the value in index register Y to index register X.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         TYX             BB      1       2


WAI - Wait for Interrupt
------------------------

 This forces the processor to wait for a hardware interrupt. Usually
used to synchronize code with external events. When an interrupt
occurs RTI will return to the opcode following the instruction.
NB If the i flag is set (interrupts disabled) and IRQ is asserted then
execution continues at the next instruction without executing the
interrupt code at the IRQ vector.

Flags Affected:  - - - - - - - -

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         WAI             CB      1       3 (a)

a Uses 3 cycles to shut the processor down; more are required to restart it


WDM - Reserved For Future Expansion
-----------------------------------

 Named after the processors designer (William D. Mensch, Jr), this was
designed as a place holder for future 65xx processors to expand their
instruction set.
 It should never be used in a program, however if it is, it acts like
a two byte NOP instruction.


Flags Affected:  *
                 * Flags will be affected variously by future expansion

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         WDM             42      2*      *

* Byte and Cycle counts subject to change in future 65xx processors.


XBA - Exchange the B and A Accumulators
---------------------------------------

 This simply swaps the high and low bytes of the accumulator.
NB The flags are affected by the low byte of the accumulator after swap.

Flags Affected:  n - - - - - z -
                 n Set if result is negative, else cleared
                 z Set if result is zero, else cleared

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         XBA             EB      1       3
                                (or SWA)


XCE - Exchange Carry and Emulation Bits
---------------------------------------

 This instruction is the only way to switch between native and emulation
mode. The c flag is swapped with the e flag switch modes.

 If emulation mode was selected then the Accumulator is forced to 8 bit
mode (the high byte is preserved), the index registers X & Y are forced
to 8 bit their high bytes being lost, the stack registers high byte is
forced to 1. The mode select flags (m & x) are lost and x is replaced
with the b flag.

 If native mode was selected then the index registers high bytes are
set to zero, the b flag is lost and the m & x flags return to the
flags register both are set to 1.

                                 e
Flags Affected:  - - m b/x - - - c
                 e Takes on carry's previous value
                 c Takes on emulation's previous value
                 m This is a native mode flag only, set if native mode
                 x This is a native mode flag only, set if native mode
                 b This is an emulation mode flag.

Addressing Mode                 Syntax          Opcode  Bytes   Cycles
                                                (HEX)
Implied                         XCE             FB      1       2


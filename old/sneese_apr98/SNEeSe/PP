	# 1 "screenl.S"





























	# 1 "TilesL.S" 1






















	.balign 16
PLOT8x8_8BplTile:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_8BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_8BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_8BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_4BplTile:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_4BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_4BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_4BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_2BplTile:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddress,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_2BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddress,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_2BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddressY,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT8x8_2BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddressY,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_8BplTile:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax
	pushl %eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax

	addl $64,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ebx
	popl %ecx
	popl %eax
	ret

	.balign 16
PLOT16x16_8BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax
	pushl %eax
	addl $64,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ebx
	popl %ecx
	popl %eax
	ret

	.balign 16
PLOT16x16_8BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax
	pushl %eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax

	addl $64,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ebx
	popl %ecx
	popl %eax
	ret

	.balign 16
PLOT16x16_8BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax
	pushl %eax
	addl $64,%eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl 32(%eax),%ebx   
	movl 48(%eax),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%eax),%bx      
	movw 16(%eax),%cx    
	.else
	movl 32(%esi),%ebx   
	movl 48(%esi),%ecx   
	bswapl %ebx
	bswapl %ecx
	movw (%esi),%bx      
	movw 16(%esi),%cx    
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	incb %al
	7:   
	testb %ah,%bh
	jz  7f
	orb $2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $8,%al
	7:  bswapl %ebx
	bswapl %ecx
	testb %ah,%bl
	jz  7f
	orb $0x10,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb $0x20,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb $0x40,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb $0x80,%al
	7:  bswapl %ebx
	bswapl %ecx
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ebx
	popl %ecx
	popl %eax
	ret

	.balign 16
PLOT16x16_4BplTile:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax
	pushl %eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax
	addl $32,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_4BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddress,%eax
	pushl %eax
	addl $32,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_4BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax
	pushl %eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax
	addl $32,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_4BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx

	addl TileAddressY,%eax
	pushl %eax
	addl $32,%eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_2BplTile:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddress,%eax
	pushl %eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax
	addl $16,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_2BplTile_X:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddress,%eax
	pushl %eax
	addl $16,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_2BplTile_Y:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddressY,%eax
	pushl %eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %eax
	addl $16,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT16x16_2BplTile_XY:
	pushl %eax
	pushl %ebx
	pushl %edx

	movb ColourBase1,%dl
	movb ColourBase2,%dh
	addl TileAddressY,%eax
	pushl %eax
	addl $16,%eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %eax

	.if 0-1
	movl (%eax),%ebx
	.else
	movl (%esi),%ebx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb %dl,%al      
	7:   
	testb %ah,%bh
	jz  7f
	orb %dh,%al      
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %edx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT32x32_4BplSprite:
S_TILE_32x32_4:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddress,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT32x32_4BplSprite_X:
S_TILE_32x32_4_X:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddress,%eax
	addl $32*3,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT32x32_4BplSprite_Y:
S_TILE_32x32_4_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddressY,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT32x32_4BplSprite_XY:
S_TILE_32x32_4_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddressY,%eax
	addl $32*3,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT64x64_4BplSprite:
S_TILE_64x64_4:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddress,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT64x64_4BplSprite_X:
S_TILE_64x64_4_X:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddress,%eax
	addl $32*7,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT64x64_4BplSprite_Y:
S_TILE_64x64_4_Y:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddressY,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b
	addl $9,%edi

	addl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 0-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 0-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.balign 16
PLOT64x64_4BplSprite_XY:
S_TILE_64x64_4_XY:
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %esi

	addl TileAddressY,%eax
	addl $32*7,%eax
	movl %eax,%esi

	.if 0-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	subl $32,%esi

	.if 1-1
	movl (%eax),%ebx
	movl 16(%eax),%ecx
	.else
	movl (%esi),%ebx
	movl 16(%esi),%ecx
	.endif

	.if 1-1
	addl $7,%edi
	.endif
	movb $1,%ah      

	8:  cmpb $0,(%edi)   
	jnz 6f
	xorb %al,%al

	testb %ah,%bl
	jz  7f
	orb ColourBase1,%al
	7:   
	testb %ah,%bh
	jz  7f
	orb ColourBase2,%al
	7:   
	testb %ah,%cl
	jz  7f
	orb ColourBase4,%al
	7:   
	testb %ah,%ch
	jz  7f
	orb ColourBase8,%al
	7:
	movb %al,(%edi)
	6:
	.if 1-1
	decl %edi
	.else
	incl %edi
	.endif
	addb %ah,%ah
	jnz 8b

	popl %esi
	popl %ecx
	popl %ebx
	popl %eax
	ret

	.long	
	.balign 16					 
Tile_Line_8x8_2:
	.long	PLOT8x8_2BplTile
	.long	PLOT8x8_2BplTile_X
	.long	PLOT8x8_2BplTile_Y
	.long	PLOT8x8_2BplTile_XY

Tile_Line_16x16_2:
	.long   PLOT16x16_2BplTile
	.long   PLOT16x16_2BplTile_X
	.long   PLOT16x16_2BplTile_Y
	.long   PLOT16x16_2BplTile_XY

Tile_Line_8x8_4:
Sprite_Tile_Plot_8x8_4:
	.long	PLOT8x8_4BplTile
	.long	PLOT8x8_4BplTile_X
	.long	PLOT8x8_4BplTile_Y
	.long	PLOT8x8_4BplTile_XY

Tile_Line_16x16_4:
Sprite_Tile_Plot_16x16_4:
	.long   PLOT16x16_4BplTile
	.long   PLOT16x16_4BplTile_X
	.long   PLOT16x16_4BplTile_Y
	.long   PLOT16x16_4BplTile_XY

Sprite_Tile_Plot_32x32_4:
	.long   PLOT32x32_4BplSprite
	.long   PLOT32x32_4BplSprite_X
	.long   PLOT32x32_4BplSprite_Y
	.long   PLOT32x32_4BplSprite_XY

Sprite_Tile_Plot_64x64_4:
	.long   PLOT64x64_4BplSprite
	.long   PLOT64x64_4BplSprite_X
	.long   PLOT64x64_4BplSprite_Y
	.long   PLOT64x64_4BplSprite_XY

Tile_Line_8x8_8:
	.long	PLOT8x8_8BplTile
	.long	PLOT8x8_8BplTile_X
	.long	PLOT8x8_8BplTile_Y
	.long	PLOT8x8_8BplTile_XY

Tile_Line_16x16_8:
	.long   PLOT16x16_8BplTile
	.long   PLOT16x16_8BplTile_X
	.long   PLOT16x16_8BplTile_Y
	.long   PLOT16x16_8BplTile_XY

	.global	 ColourBase1
ColourBase1:	.byte	1
	.global	 ColourBase2
ColourBase2:	.byte	2
	.global	 ColourBase4
ColourBase4:	.byte	4
	.global	 ColourBase8
ColourBase8:	.byte	8
	.global		ColourBase
ColourBase:	.byte   0

	.text
	# 31 "screenl.S" 2

	# 1 "spriteL.S" 1














SPRITE_NOT_SUPPORTED:
	ret














	.balign 16
RENDER_SPRITE_8x8_16x16:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x07,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(8-1),%al
	jb 5f
	4:
	andb $(8-1),%al     

	.if 8-8   
	.if 8-16  
	.if 8-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 8-8   
	.if 8-16  
	.if 8-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x0F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:


	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(16-1),%al
	jb 5f
	4:
	andb $(16-1),%al     

	.if 16-8   
	.if 16-16  
	.if 16-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 16-8   
	.if 16-16  
	.if 16-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 



	.balign 16
RENDER_SPRITE_8x8_32x32:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x07,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(8-1),%al
	jb 5f
	4:
	andb $(8-1),%al     

	.if 8-8   
	.if 8-16  
	.if 8-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 8-8   
	.if 8-16  
	.if 8-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x1F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:


	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(32-1),%al
	jb 5f
	4:
	andb $(32-1),%al     

	.if 32-8   
	.if 32-16  
	.if 32-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 32-8   
	.if 32-16  
	.if 32-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 



	.balign 16
RENDER_SPRITE_8x8_64x64:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x07,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(8-1),%al
	jb 5f
	4:
	andb $(8-1),%al     

	.if 8-8   
	.if 8-16  
	.if 8-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 8-8   
	.if 8-16  
	.if 8-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x3F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:


	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(64-1),%al
	jb 5f
	4:
	andb $(64-1),%al     

	.if 64-8   
	.if 64-16  
	.if 64-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 64-8   
	.if 64-16  
	.if 64-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 



	.balign 16
RENDER_SPRITE_16x16_32x32:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x0F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(16-1),%al
	jb 5f
	4:
	andb $(16-1),%al     

	.if 16-8   
	.if 16-16  
	.if 16-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 16-8   
	.if 16-16  
	.if 16-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x1F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:

	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(32-1),%al
	jb 5f
	4:
	andb $(32-1),%al     

	.if 32-8   
	.if 32-16  
	.if 32-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 32-8   
	.if 32-16  
	.if 32-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 



	.balign 16
RENDER_SPRITE_16x16_64x64:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x0F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(16-1),%al
	jb 5f
	4:
	andb $(16-1),%al     

	.if 16-8   
	.if 16-16  
	.if 16-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 16-8   
	.if 16-16  
	.if 16-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x3F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:

	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(64-1),%al
	jb 5f
	4:
	andb $(64-1),%al     

	.if 64-8   
	.if 64-16  
	.if 64-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 64-8   
	.if 64-16  
	.if 64-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 



	.balign 16
RENDER_SPRITE_32x32_64x64:
	pushl %ecx
	pushl %edx
	pushl %ebp
	pushl %esi
	pushl %edi

	movb HiSpriteCnt2,%al
	testb %al,%al
	jz  0f
	pushl $0
	0:  pushl %eax
	movl _OAMAddress,%esi    
	movl %esi,%ebx
	addl HighestSprite,%esi  
	addl HiSpriteBits,%ebx   
	movb HiSpriteBits2,%cl   
	movb HiSpriteCnt1,%dl    
	movl OBADDR,%ebp
	0:  xorl %eax,%eax           
	movb (%ebx),%dh
	rolb %cl,%dh             
	jnc 4f
	subb (%esi),%al          
	jz  7f                   
	rorb $2,%dh              
	jc  2f

	cmpb $0x1F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	jmp 3f

	4:  movb (%esi),%al          
	pushl %edi
	pushl %ebx
	addl %eax,%edi           
	rorb $2,%dh              
	jc  1f


	3:
	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(32-1),%al
	jb 5f
	4:
	andb $(32-1),%al     

	.if 32-8   
	.if 32-16  
	.if 32-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 32-8   
	.if 32-16  
	.if 32-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 


	2:
	cmpb $0x3F,%al           
	ja  7f
	pushl %edi               
	pushl %ebx
	subl %eax,%edi           
	1:

	movb 1(%esi),%al        
	movb HDMAYCount,%dh
	testb %dh,%dh
	jz 5f                   
	incb %al
	subb %dh,%al            
	jz 4f
	cmpb $-(64-1),%al
	jb 5f
	4:
	andb $(64-1),%al     

	.if 64-8   
	.if 64-16  
	.if 64-32  
	movl Sprite_Offset_Table_64_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_64(,%eax,4),%eax
	.else
	movl Sprite_Offset_Table_32_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_32(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_16_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_16(,%eax,4),%eax
	.endif
	.else
	movl Sprite_Offset_Table_8_Y(,%eax,4),%ebx
	movl Sprite_Offset_Table_8(,%eax,4),%eax
	.endif

	movl OBADDR,%ebp
	movb 3(%esi),%dh    
	testb $1,%dh
	jz 4f
	movl OBNAME,%ebp
	4:
	addl %ebp,%eax
	addl %ebp,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY








	movb %dh,%ah
	movb 2(%esi),%al    
	andb $0x30,%dh      
	cmpb %ch,%dh        
	jne 5f


	movl %eax,%ebx
	shrl $5,%eax
	andb $0x70,%al
	orb  $0x80,%al      
	movb %al,%ah
	movb %al,%dh
	bswapl %eax
	movb %dh,%al
	movb %dh,%ah
	orl  %eax,ColourBase1
	movl %ebx,%eax
	shrl $14,%ebx
	andl $0x1FF,%eax    
	shll $5,%eax        
	andl $3,%ebx        

	.if 64-8   
	.if 64-16  
	.if 64-32  
	call Sprite_Tile_Plot_64x64_4(,%ebx,4)
	.else
	call Sprite_Tile_Plot_32x32_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_16x16_4(,%ebx,4)
	.endif
	.else
	call Sprite_Tile_Plot_8x8_4(,%ebx,4)
	.endif

	movl $0x08040201,ColourBase1
	5:
	popl %ebx
	popl %edi
	7:
	subb $2,%cl
	jnz 8f              
	movb $8,%cl
	incl %ebx           
	8:
	addl $4,%esi        
	decb %dl
	jnz 0b              
	popl %edx
	subl $0x200,%esi
	subl $0x20,%ebx
	testb %dl,%dl
	jnz 0b

	popl %edi
	popl %esi
	popl %ebp
	popl %edx
	popl %ecx
	ret 






	.long	

	.balign 4


Sprite_Offset_Table_8:
	.long	0		 
	.long	14		 
	.long	12		 
	.long	10		 
	.long	8		 
	.long	6		 
	.long	4		 
	.long	2		 

Sprite_Offset_Table_8_Y:
	.long	14
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12

Sprite_Offset_Table_16:
	.long	0
	.long	16*8*4+14
	.long	16*8*4+12
	.long	16*8*4+10
	.long	16*8*4+8
	.long	16*8*4+6
	.long	16*8*4+4
	.long	16*8*4+2
	.long	16*8*4
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2

Sprite_Offset_Table_16_Y:
	.long	16*8*4+14
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*4
	.long	16*8*4+2
	.long	16*8*4+4
	.long	16*8*4+6
	.long	16*8*4+8
	.long	16*8*4+10
	.long	16*8*4+12

Sprite_Offset_Table_32:
	.long	0
	.long	16*8*4*3+14
	.long	16*8*4*3+12
	.long	16*8*4*3+10
	.long	16*8*4*3+8
	.long	16*8*4*3+6
	.long	16*8*4*3+4
	.long	16*8*4*3+2
	.long	16*8*4*3
	.long	16*8*4*2+14
	.long	16*8*4*2+12
	.long	16*8*4*2+10
	.long	16*8*4*2+8
	.long	16*8*4*2+6
	.long	16*8*4*2+4
	.long	16*8*4*2+2
	.long	16*8*4*2
	.long	16*8*4+14
	.long	16*8*4+12
	.long	16*8*4+10
	.long	16*8*4+8
	.long	16*8*4+6
	.long	16*8*4+4
	.long	16*8*4+2
	.long	16*8*4
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2

Sprite_Offset_Table_32_Y:
	.long	16*8*4*3+14
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*4
	.long	16*8*4+2
	.long	16*8*4+4
	.long	16*8*4+6
	.long	16*8*4+8
	.long	16*8*4+10
	.long	16*8*4+12
	.long	16*8*4+14
	.long	16*8*4*2
	.long	16*8*4*2+2
	.long	16*8*4*2+4
	.long	16*8*4*2+6
	.long	16*8*4*2+8
	.long	16*8*4*2+10
	.long	16*8*4*2+12
	.long	16*8*4*2+14
	.long	16*8*4*3
	.long	16*8*4*3+2
	.long	16*8*4*3+4
	.long	16*8*4*3+6
	.long	16*8*4*3+8
	.long	16*8*4*3+10
	.long	16*8*4*3+12

Sprite_Offset_Table_64:
	.long	0
	.long	16*8*4*7+14
	.long	16*8*4*7+12
	.long	16*8*4*7+10
	.long	16*8*4*7+8
	.long	16*8*4*7+6
	.long	16*8*4*7+4
	.long	16*8*4*7+2
	.long	16*8*4*7
	.long	16*8*4*6+14
	.long	16*8*4*6+12
	.long	16*8*4*6+10
	.long	16*8*4*6+8
	.long	16*8*4*6+6
	.long	16*8*4*6+4
	.long	16*8*4*6+2
	.long	16*8*4*6
	.long	16*8*4*5+14
	.long	16*8*4*5+12
	.long	16*8*4*5+10
	.long	16*8*4*5+8
	.long	16*8*4*5+6
	.long	16*8*4*5+4
	.long	16*8*4*5+2
	.long	16*8*4*5
	.long	16*8*4*4+14
	.long	16*8*4*4+12
	.long	16*8*4*4+10
	.long	16*8*4*4+8
	.long	16*8*4*4+6
	.long	16*8*4*4+4
	.long	16*8*4*4+2
	.long	16*8*4*4
	.long	16*8*4*3+14
	.long	16*8*4*3+12
	.long	16*8*4*3+10
	.long	16*8*4*3+8
	.long	16*8*4*3+6
	.long	16*8*4*3+4
	.long	16*8*4*3+2
	.long	16*8*4*3
	.long	16*8*4*2+14
	.long	16*8*4*2+12
	.long	16*8*4*2+10
	.long	16*8*4*2+8
	.long	16*8*4*2+6
	.long	16*8*4*2+4
	.long	16*8*4*2+2
	.long	16*8*4*2
	.long	16*8*4+14
	.long	16*8*4+12
	.long	16*8*4+10
	.long	16*8*4+8
	.long	16*8*4+6
	.long	16*8*4+4
	.long	16*8*4+2
	.long	16*8*4
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2

Sprite_Offset_Table_64_Y:
	.long	16*8*4*7+14
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*4
	.long	16*8*4+2
	.long	16*8*4+4
	.long	16*8*4+6
	.long	16*8*4+8
	.long	16*8*4+10
	.long	16*8*4+12
	.long	16*8*4+14
	.long	16*8*4*2
	.long	16*8*4*2+2
	.long	16*8*4*2+4
	.long	16*8*4*2+6
	.long	16*8*4*2+8
	.long	16*8*4*2+10
	.long	16*8*4*2+12
	.long	16*8*4*2+14
	.long	16*8*4*3
	.long	16*8*4*3+2
	.long	16*8*4*3+4
	.long	16*8*4*3+6
	.long	16*8*4*3+8
	.long	16*8*4*3+10
	.long	16*8*4*3+12
	.long	16*8*4*3+14
	.long	16*8*4*4
	.long	16*8*4*4+2
	.long	16*8*4*4+4
	.long	16*8*4*4+6
	.long	16*8*4*4+8
	.long	16*8*4*4+10
	.long	16*8*4*4+12
	.long	16*8*4*4+14
	.long	16*8*4*5
	.long	16*8*4*5+2
	.long	16*8*4*5+4
	.long	16*8*4*5+6
	.long	16*8*4*5+8
	.long	16*8*4*5+10
	.long	16*8*4*5+12
	.long	16*8*4*5+14
	.long	16*8*4*6
	.long	16*8*4*6+2
	.long	16*8*4*6+4
	.long	16*8*4*6+6
	.long	16*8*4*6+8
	.long	16*8*4*6+10
	.long	16*8*4*6+12
	.long	16*8*4*6+14
	.long	16*8*4*7
	.long	16*8*4*7+2
	.long	16*8*4*7+4
	.long	16*8*4*7+6
	.long	16*8*4*7+8
	.long	16*8*4*7+10
	.long	16*8*4*7+12

	.globl SPRMODE
SPRMODE:	.long   RENDER_SPRITE_8x8_16x16

	.globl Sprite_Mode
Sprite_Mode:
	.long   RENDER_SPRITE_8x8_16x16      
	.long   RENDER_SPRITE_8x8_32x32      
	.long   RENDER_SPRITE_8x8_64x64      
	.long   RENDER_SPRITE_16x16_32x32    
	.long   RENDER_SPRITE_16x16_64x64    
	.long   RENDER_SPRITE_32x32_64x64    
	.long   SPRITE_NOT_SUPPORTED         
	.long   SPRITE_NOT_SUPPORTED         

	.text
	# 32 "screenl.S" 2



	.balign 16
RENDER_LINE_8x8_OFFSET_CHANGE:

	pusha

	movb $32,%cl			 
	movl ScreenAddress3,%ebx    /. %ebx contains address of vert offset data
	addl $64,%ebx
	2:
	pushl %ecx
	movb %ch,%dh

	movl HDMAYCount,%ecx
	movw (%ebx),%ax
	andb %dh,%ah
	jz 0f
	addb %al,%cl
	0:	addl $2,%ebx
	andl $0xFF,%ecx              

	pushl %ebx

	movl %ecx,%eax
	andl $0x07,%eax
	andl $0xF8,%ecx
	shll $3,%ecx     
	movl TileAddressM2,%edx
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%eax
	addl %edx,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	addl %esi,%ecx

	movl (%ecx),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_8x8_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	popl %ebx
	popl %ecx

	decb %cl
	jnz	2b

	popa
	ret














	.balign 16
RENDER_8x8_M0:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x07,%eax      
	andl $0xF8,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $3,%edx
	movb %dl,%ch
	movb $32,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $33,%ch
	subb %dl,%ch
	shll $3,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $32,%ch
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_16x16_M0:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x0F,%eax      
	andl $0xF0,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $4,%edx
	movb %dl,%ch
	movb $16,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $17,%ch
	subb %dl,%ch
	shll $4,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $16,%ch
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addb %cl,%dl         
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_8x8_C2:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x07,%eax      
	andl $0xF8,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $3,%edx
	movb %dl,%ch
	movb $32,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $33,%ch
	subb %dl,%ch
	shll $3,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $32,%ch
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_16x16_C2:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x0F,%eax      
	andl $0xF0,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $4,%edx
	movb %dl,%ch
	movb $16,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $17,%ch
	subb %dl,%ch
	shll $4,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $16,%ch
	pushl %ecx

	movl TileAddress_2,%eax
	movl TileAddressY_2,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	shll $4,%eax         
	movb %dl,%dh
	orl  %edx,ColourBase1

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_2(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_8x8_C4:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x07,%eax      
	andl $0xF8,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $3,%edx
	movb %dl,%ch
	movb $32,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_8x8_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $33,%ch
	subb %dl,%ch
	shll $3,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_8x8_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $32,%ch
	pushl %ecx

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_8x8_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_16x16_C4:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x0F,%eax      
	andl $0xF0,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $4,%edx
	movb %dl,%ch
	movb $16,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	movl TileAddress_4,%eax
	movl TileAddressY_4,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_16x16_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $17,%ch
	subb %dl,%ch
	shll $4,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	movl TileAddress_4,%eax
	movl TileAddressY_4,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_16x16_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $16,%ch
	pushl %ecx

	movl TileAddress_4,%eax
	movl TileAddressY_4,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	movb %ah,%dl
	addl $2,%esi         
	movl %eax,%ebx
	andl $0x1C,%edx      
	andl $0x3FF,%eax     
	addl %edx,%edx
	shll $5,%eax         
	addl %edx,%edx
	movb %dl,%dh
	orl  %edx,ColourBase1
	orw  %dx,ColourBase4

	shrl $14,%ebx
	andl $3,%ebx     

	call Tile_Line_16x16_4(,%ebx,4)
	movl $0x08040201,ColourBase1

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_8x8_C8:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x07,%eax      
	andl $0xF8,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $3,%edx
	movb %dl,%ch
	movb $32,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $33,%ch
	subb %dl,%ch
	shll $3,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $32,%ch
	pushl %ecx

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_8x8_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	ret
	.balign 16
RENDER_16x16_C8:
	testb %al,%al    
	jz 0f

	movl $0x100,%edx
	movb %al,%bl
	andl $0x0F,%eax      
	andl $0xF0,%ebx
	subl %eax,%edi
	subl %ebx,%edx
	shrl $4,%edx
	movb %dl,%ch
	movb $16,%dl
	subb %ch,%dl
	pushl %esi
	addl ScreenAddressL,%esi
	addl %edx,%esi
	addl %edx,%esi
	pushl %ecx

	movl TileAddress_8,%eax
	movl TileAddressY_8,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	xorl %edx,%edx
	popl %esi
	movb %ch,%dl
	movb $17,%ch
	subb %dl,%ch
	shll $4,%edx
	addl ScreenAddressR,%esi
	pushl %ecx

	movl TileAddress_8,%eax
	movl TileAddressY_8,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	ret
	0:	addl ScreenAddressL,%esi
	movb $16,%ch
	pushl %ecx

	movl TileAddress_8,%eax
	movl TileAddressY_8,%ebx
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	1:  movl (%esi),%eax     
	addl $2,%esi         

	movl %eax,%ebx
	andl $0x3FF,%eax     
	shll $6,%eax         

	shrl $14,%ebx
	andl $3,%ebx         

	call Tile_Line_16x16_8(,%ebx,4)

	decb %ch
	jnz	1b

	popl %ecx
	ret

RENDER_MODE_7_FX:
	pusha

	movb Redo_M7,%dl
	testb $0x0F,%dl  
	jz  0f
	testb $0x0A,%dl  
	jz  1f
	movl BG1VScrollData,%eax
	subl _M7Y_DATA,%eax
	testb $0x02,%dl  
	jz  2f
	pushl %eax
	imull _M7B_DATA,%eax
	movl %eax,Mode7_B
	popl %eax
	testb $0x08,%dl  
	jz  1f
	2:  imull _M7D_DATA,%eax
	movl %eax,Mode7_D
	1:  movl BG1HScrollData,%eax
	subl _M7X_DATA,%eax
	2:  testb $0x05,%dl  
	jz  0f
	movl BG1HScrollData,%eax
	subl _M7X_DATA,%eax
	testb $0x01,%dl  
	jz  2f
	pushl %eax
	imull _M7A_DATA,%eax
	movl _M7X_DATA,%ebx
	shll $8,%ebx
	addl %ebx,%eax
	movl %eax,Mode7_A_P
	popl %eax
	testb $0x04,%dl  
	jz  0f
	2:  imull _M7C_DATA,%eax
	movl _M7Y_DATA,%ebx
	shll $8,%ebx
	addl %ebx,%eax
	movl %eax,Mode7_C_P
	0:  movb $0,Redo_M7  
	movl HDMAYCount,%ebx

	movb M7SEL,%al
	testb $2,%al     
	jz  SKIP_M7_Y

	movl $255,%edx
	subl %ebx,%edx
	movl %edx,%ebx

SKIP_M7_Y:
	movl _M7B_DATA,%edx
	imull %ebx,%edx
	addl Mode7_A_P,%edx
	addl Mode7_B,%edx
	movl %edx,Mode7_A

	movl _M7D_DATA,%edx
	imull %ebx,%edx
	addl Mode7_C_P,%edx
	addl Mode7_D,%edx
	movl %edx,Mode7_C

	movl _VRamAddress,%esi


	testb $1,%al     
	jnz M7_X

	shrb $6,%al      
	cmpb $3,%al
	je M7_CLIP

	testb %al,%al
	jz M7_REPEAT     

	jmp M7_CHAR0

M7_X:
	shrb $6,%al      
	cmpb $3,%al
	je M7_CLIPX

	testb %al,%al
	jz M7_REPEATX    

	jmp M7_CHAR0X

M7_REPEAT:
	movl Mode7_A,%eax
	movl Mode7_C,%ebx

	movl $256,%ebp       

	1:  pushl %eax
	pushl %ebx

	shrl $8,%eax
	shrl $8,%ebx
	andl $0x3FF,%eax
	andl $0x3FF,%ebx

	cmpb $0,(%edi)       
	jne 4f


	pushl %ecx
	pushl %edx
	movl %eax,%ecx
	movl %ebx,%edx
	shrl $3,%eax     
	andl $7,%ecx     
	andl $~7,%ebx
	andl $7,%edx
	shll $5,%ebx     
	addb %al,%al
	movb %al,%bl     
	xorl %eax,%eax
	movb (%esi,%ebx),%al     
	shll $7,%eax             
	addl %esi,%eax
	incl %eax

	addl %ecx,%ecx
	addl %ecx,%eax           
	shll $4,%edx
	addl %edx,%eax           

	movb (%eax),%al
	movb %al,(%edi)
	popl %edx
	popl %ecx

	4:  popl %ebx
	popl %eax

	movl _M7A_DATA,%ecx
	movl _M7C_DATA,%edx
	addl %ecx,%eax
	addl %edx,%ebx

	incl %edi

	decl %ebp
	jnz 1b

	popa
	ret

M7_REPEATX:
	movl Mode7_A,%eax
	movl Mode7_C,%ebx

	addl $255,%edi

	movl $256,%ebp       

	1:  pushl %eax
	pushl %ebx

	shrl $8,%eax
	shrl $8,%ebx
	andl $0x3FF,%eax
	andl $0x3FF,%ebx

	cmpb $0,(%edi)       
	jne 4f


	pushl %ecx
	pushl %edx
	movl %eax,%ecx
	movl %ebx,%edx
	shrl $3,%eax     
	andl $7,%ecx     
	andl $~7,%ebx
	andl $7,%edx
	shll $5,%ebx     
	addb %al,%al
	movb %al,%bl     
	xorl %eax,%eax
	movb (%esi,%ebx),%al     
	shll $7,%eax             
	addl %esi,%eax
	incl %eax

	addl %ecx,%ecx
	addl %ecx,%eax           
	shll $4,%edx
	addl %edx,%eax           

	movb (%eax),%al
	movb %al,(%edi)
	popl %edx
	popl %ecx

	4:  popl %ebx
	popl %eax

	movl _M7A_DATA,%ecx
	movl _M7C_DATA,%edx
	addl %ecx,%eax
	addl %edx,%ebx

	decl %edi

	decl %ebp
	jnz 1b

	popa
	ret

M7_CHAR0:
M7_CLIP:
	movl Mode7_A,%eax
	movl Mode7_C,%ebx

	movl $256,%ebp       

	1:  pushl %eax
	pushl %ebx

	shrl $8,%eax
	shrl $8,%ebx

	cmpb $0,(%edi)       
	jne 4f

	cmpl $1023,%eax      
	ja 4f
	cmpl $1023,%ebx
	ja 4f


	pushl %ecx
	pushl %edx
	movl %eax,%ecx
	movl %ebx,%edx
	shrl $3,%eax     
	andl $7,%ecx     
	andl $~7,%ebx
	andl $7,%edx
	shll $5,%ebx     
	addb %al,%al
	movb %al,%bl     
	xorl %eax,%eax
	movb (%esi,%ebx),%al     
	shll $7,%eax             
	addl %esi,%eax
	incl %eax

	addl %ecx,%ecx
	addl %ecx,%eax           
	shll $4,%edx
	addl %edx,%eax           

	movb (%eax),%al
	movb %al,(%edi)
	popl %edx
	popl %ecx

	4:  popl %ebx
	popl %eax

	movl _M7A_DATA,%ecx
	movl _M7C_DATA,%edx
	addl %ecx,%eax
	addl %edx,%ebx

	incl %edi

	decl %ebp
	jnz 1b

	popa
	ret

M7_CHAR0X:
M7_CLIPX:
	movl Mode7_A,%eax
	movl Mode7_C,%ebx

	addl $255,%edi

	movl $256,%ebp           

	1:  pushl %eax
	pushl %ebx

	shrl $8,%eax
	shrl $8,%ebx

	cmpb $0,(%edi)       
	jne 4f

	cmpl $1023,%eax      
	ja 4f
	cmpl $1023,%ebx
	ja 4f


	pushl %ecx
	pushl %edx
	movl %eax,%ecx
	movl %ebx,%edx
	shrl $3,%eax     
	andl $7,%ecx     
	andl $~7,%ebx
	andl $7,%edx
	shll $5,%ebx     
	addb %al,%al
	movb %al,%bl     
	xorl %eax,%eax
	movb (%esi,%ebx),%al     
	shll $7,%eax             
	addl %esi,%eax
	incl %eax

	addl %ecx,%ecx
	addl %ecx,%eax           
	shll $4,%edx
	addl %edx,%eax           

	movb (%eax),%al
	movb %al,(%edi)
	popl %edx
	popl %ecx

	4:  popl %ebx
	popl %eax

	movl _M7A_DATA,%ecx
	movl _M7C_DATA,%edx
	addl %ecx,%eax
	addl %edx,%ebx

	decl %edi

	decl %ebp
	jnz 1b

	popa
	ret

	.balign 16
	.globl Clear_Screen
Clear_Screen:
	pushl %eax
	pushl %ecx
	pushl %edi

	movl _ScreenX,%ecx
	shrl $2,%ecx
	imull _ScreenY,%ecx

	movl _SNES_Screen,%edi
	xorl %eax,%eax
	rep
	stosl

	popl %edi
	popl %ecx
	popl %eax
	ret

	.balign 16
	.globl Copy_Screen
Copy_Screen:
	pusha

	movb _fixedpalettecheck,%al
	cmpb $0,%al
	je 0f

	movb $0,_fixedpalettecheck	
	movb CGWSEL,%al		 
	andb $0x02,%al
	jz 0f
	movb CGADSUB,%al
	andb $0x20,%al
	jz 0f
	movb CGADSUB,%al
	andb $0x80,%al
	jnz 0f

	movw FIXEDCOLDATA,%bx
	xorl %eax,%eax
	movl _Real_SNES_Palette,%edi
	movw %bx,(%edi,%eax,2)

	pusha
	call _SetPalette
	popa
	0:
	xorl %eax,%eax
	movl _BKG,%edi
	addl $64+(256+2*64)*(64+224),%edi
	movl $32,%edx    
	testb $4,SETINI  
	jz  2f           

	addl $(256+2*64)*16,%edi
	subl $16,%edx    

	2:  movl $(256/4),%ecx
	rep
	stosl

	addl $128,%edi       
	decl %edx
	jnz 2b

	movb _PC_SCREEN_MODE,%al
	andb $7,%eax
	jmpl Copy_Screen_Table(,%eax,4)

VGA_COPY:
	pushl %es
	pushl %gs
	popl %es
	movl $0xA0000,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi  
	movb $200,%dl
	0:  movl $(256/4),%ecx
	rep
	movsl

	addl $(320-256),%edi
	addl $128,%esi			 
	decb %dl
	jnz 0b

	popl %es
	popa
	ret

MODEX_COPY:
	movl _ScreenY,%eax
	movl _ScreenX,%edx
	subl $256,%edx

	movl _SNES_Screen,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi  
	0:  movl $(256/4),%ecx
	rep
	movsl

	addl %edx,%edi
	addl $128,%esi			 
	decl %eax
	jnz 0b

	popa
	call _CopySNESScreen         
	ret

HICOLOUR0_COPY:


	movl _SNES_Screen,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi	 
	movl _HICOLOUR_Palette,%ecx
	xorl %eax,%eax

	movb $200,%dl
	0:  movb $0,%dh          
	1:
	movb (%esi),%al
	movw (%ecx,%eax,4),%ebx
	incl %esi
	movw %bx,(%edi)
	addl $2,%edi

	decb %dh
	jnz 1b

	addl $(320-256)*2,%edi		 
	addl $128,%esi			 

	decb %dl
	jnz 0b	

	popa
	call _CopySNESScreen		 
	ret

HICOLOUR1_COPY:


	movl _SNES_Screen,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi	 
	movl _HICOLOUR_Palette,%ecx
	xorl %eax,%eax

	movb $240,%dl
	0:  movb $0,%dh          
	1:
	movb (%esi),%al
	movw (%ecx,%eax,4),%ebx
	incl %esi
	movw %bx,(%edi)
	addl $2,%edi

	decb %dh
	jnz 1b

	addl $(320-256)*2,%edi		 
	addl $128,%esi			 

	decb %dl
	jnz 0b	

	popa
	call _CopySNESScreen		 
	ret

HICOLOUR2_COPY:


	movl _SNES_Screen,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi	 
	movl _HICOLOUR_Palette,%ecx
	xorl %eax,%eax

	movb $240,%dl
	0:  movb $0,%dh          
	1:
	movb (%esi),%al
	movw (%ecx,%eax,4),%ebx
	incl %esi
	movw %bx,(%edi)
	addl $2,%edi

	decb %dh
	jnz 1b

	addl $256*3,%edi		 
	addl $128,%esi			 

	decb %dl
	jnz 0b	

	popa
	call _CopySNESScreen		 
	ret

STRETCH_COPY:


	movl _BKG,%esi
	movl _SNES_Screen,%edi
	addl $64+(256+2*64)*64,%esi	 
	movl _HICOLOUR_Palette,%ecx
	xorl %eax,%eax

	movb $240,%dl
	0:  movb $0,%dh          
	1:
	movb (%esi),%al
	incl %esi
	movl (%ecx,%eax,4),%ebx
	movl %ebx,(%edi)
	movl %ebx,1280(%edi)
	addl $4,%edi

	decb %dh
	jnz 1b

	addl $128*2+(640*2),%edi	 
	addl $128,%esi			 

	decb %dl
	jnz 0b	

	popa
	call _CopySNESScreen		 
	ret

SQUASH:
	pushl %es
	pushl %gs
	popl %es
	movl $0xA0000,%edi
	movl _BKG,%esi
	addl $64+(256+2*64)*64,%esi  
	movb $40,%dh
	0:   
	movb $5,%dl
	2:   
	movl $(256/4),%ecx
	rep
	movsl

	addl $(320-256),%edi
	addl $128,%esi			 
	decb %dl
	jnz 2b

	addl $(256+2*64),%esi		 

	decb %dh
	jnz 0b

	popl %es
	popa
	ret






	.balign 16
NO_HDMA_PLANES:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
NO_HDMA_PLANES_S:
	ret








	.balign 16
SCREEN_HDMA_MODE_0:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $0x0F,%eax
	jmp Screen_HDMA_Mode_Table_0(,%eax,4)

	0:  andl $0x0F,%eax
	jmp Screen_HDMA_Mode_Table_0_S(,%eax,4)

	.balign 16
M0_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P1_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P12_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P2_S:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P13:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P13_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P23:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P123:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
	.balign 16
M0_HDMA_P123_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P23_S:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P3_S:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P4:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P14:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P14_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P24:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P124:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P124_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P24_S:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P34:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P134:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P134_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P234:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P1234:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret
	.balign 16
M0_HDMA_P1234_S:
	movb $0,%cl          

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P234_S:
	movb $0x20,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P34_S:
	movb $0x40,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















M0_HDMA_P4_S:
	movb $0x60,%cl		 

	pusha
	xorl %edx,%edx
	movb BGSC4,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_4,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR4,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<7),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress4,%edx
	addl VScrollData_4,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_4,%al		 
	pushl $7f
	jmp RENDER_8x8_M0

	8:  SORT_TILES_16x16 4   

	movb HScrollData_4,%al		 
	call RENDER_16x16_M0
	7:
	popa			 















	ret

SCREEN_HDMA_MODE_1:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $7,%eax
	movb BGSIZE,%bl
	testb $8,%bl
	jnz 1f

	jmp Screen_HDMA_Mode_Table_1(,%eax,4)
	1:  jmp Screen_HDMA_Mode_Table_1_3(,%eax,4)

	0:  andl $7,%eax
	testb $8,BGSIZE
	jnz 1f

	jmp Screen_HDMA_Mode_Table_1_S(,%eax,4)
	1:  jmp Screen_HDMA_Mode_Table_1_3_S(,%eax,4)

M1_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P1_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
M1_HDMA_P1_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P2_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P12_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P3_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P13:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P13_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret
M1_HDMA_P13_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P13_3_S:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
M1_HDMA_P23:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P23_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P23_3_S:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
M1_HDMA_P123:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P123_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















M1_HDMA_P23_S:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















M1_HDMA_P3_S:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret
M1_HDMA_P123_3:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M1_HDMA_P123_3_S:

	pusha
	xorl %edx,%edx
	movb BGSC3,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_3,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR3,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<6),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress3,%edx
	addl VScrollData_3,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_3,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 3   

	movb HScrollData_3,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















M1_HDMA_P12_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















M1_HDMA_P2_S:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
































SCREEN_HDMA_MODE_2:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $3,%eax
	jmp Screen_HDMA_Mode_Table_2(,%eax,4)

	0:  andl $3,%eax
	jmp Screen_HDMA_Mode_Table_2_S(,%eax,4)

M2_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	movl TileAddress1,%eax
	movl %eax,TileAddressM2
	movb $1<<((1)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl ScreenAddress1,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M2_HDMA_P1_S:

	pusha
	movl TileAddress1,%eax
	movl %eax,TileAddressM2
	movb $1<<((1)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl ScreenAddress1,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	ret
M2_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	movl TileAddress2,%eax
	movl %eax,TileAddressM2
	movb $1<<((2)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl ScreenAddress2,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M2_HDMA_P2_S:

	pusha
	movl TileAddress2,%eax
	movl %eax,TileAddressM2
	movb $1<<((2)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl ScreenAddress2,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	ret
M2_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	movl TileAddress1,%eax
	movl %eax,TileAddressM2
	movb $1<<((1)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl ScreenAddress1,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	movl TileAddress2,%eax
	movl %eax,TileAddressM2
	movb $1<<((2)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl ScreenAddress2,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M2_HDMA_P12_S:

	pusha
	movl TileAddress1,%eax
	movl %eax,TileAddressM2
	movb $1<<((1)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl ScreenAddress1,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa

	pusha
	movl TileAddress2,%eax
	movl %eax,TileAddressM2
	movb $1<<((2)-1+5),%ch
	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl ScreenAddress2,%esi
	call RENDER_LINE_8x8_OFFSET_CHANGE
	jmp 7f
	8:				 


	7:
	popa
	ret

SCREEN_HDMA_MODE_3:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $3,%eax
	jmp Screen_HDMA_Mode_Table_3(,%eax,4)

	0:  andl $3,%eax
	jmp Screen_HDMA_Mode_Table_3_S(,%eax,4)

M3_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M3_HDMA_P1_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	ret
M3_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M3_HDMA_P2_S:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
M3_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M3_HDMA_P12_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C4

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret

SCREEN_HDMA_MODE_4:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $3,%eax
	jmp Screen_HDMA_Mode_Table_4(,%eax,4)

	0:  andl $3,%eax
	jmp Screen_HDMA_Mode_Table_4_S(,%eax,4)

M4_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M4_HDMA_P1_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	ret
M4_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M4_HDMA_P2_S:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret
M4_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M4_HDMA_P12_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_8x8_C8

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C8
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shll $3,%esi     
	movl Tile_Offset_Table_8_Y(,%eax,4),%ebx
	movl Tile_Offset_Table_8(,%eax,4),%eax
	addl %edx,%ebx
	addl %edx,%eax
	movl %eax,TileAddress
	movl %ebx,TileAddressY

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_8x8_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret

SCREEN_HDMA_MODE_5:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $3,%eax
	jmp Screen_HDMA_Mode_Table_5(,%eax,4)

	0:  andl $3,%eax
	jmp Screen_HDMA_Mode_Table_5_S(,%eax,4)

M5_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M5_HDMA_P1_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret
M5_HDMA_P2:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_16x16_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M5_HDMA_P2_S:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_16x16_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret
M5_HDMA_P12:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_16x16_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M5_HDMA_P12_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 
















	pusha
	xorl %edx,%edx
	movb BGSC2,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_2,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR2,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<5),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress2,%edx
	addl VScrollData_2,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_2,%al		 
	pushl $7f
	jmp RENDER_16x16_C2

	8:  SORT_TILES_16x16 2   

	movb HScrollData_2,%al		 
	call RENDER_16x16_C2
	7:
	popa			 















	ret

SCREEN_HDMA_MODE_6:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $1,%eax
	jmp Screen_HDMA_Mode_Table_6(,%eax,4)

	0:  andl $1,%eax
	jmp Screen_HDMA_Mode_Table_6_S(,%eax,4)

M6_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M6_HDMA_P1_S:

	pusha
	xorl %edx,%edx
	movb BGSC1,%al
	cmpb $2,%al
	jb 0f
	movl VScrollData_1,%eax
	je 2f

	3:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2*2,%edx
	jmp 0f

	2:  addl HDMAYCount,%eax
	testb $1,%ah
	jz  0f           
	movl $32*32*2,%edx

	0:  movl ScreenAddressL1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressL
	movl ScreenAddressR1,%eax
	addl %edx,%eax
	movl %eax,ScreenAddressR

	movb BGSIZE,%al
	testb $(1<<4),%al
	jnz 8f           

	movl HDMAYCount,%eax
	movl TileAddress1,%edx
	addl VScrollData_1,%eax
	movl %eax,%esi
	andl $0xF8,%esi
	andl $0x07,%eax
	shl $3,%esi   
	movl Tile_Offset_Table_16_2(,%eax,4),%ebx
	movl Tile_Offset_Table_16_2_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_2
	movl %ebp,TileAddressY_2
	movl Tile_Offset_Table_16_4(,%eax,4),%ebx
	movl Tile_Offset_Table_16_4_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_4
	movl %ebp,TileAddressY_4
	movl Tile_Offset_Table_16_8(,%eax,4),%ebx
	movl Tile_Offset_Table_16_8_Y(,%eax,4),%ebp
	addl %edx,%ebx
	addl %edx,%ebp
	movl %ebx,TileAddress_8
	movl %ebp,TileAddressY_8

	movb HScrollData_1,%al		 
	pushl $7f
	jmp RENDER_16x16_C4

	8:  SORT_TILES_16x16 1   

	movb HScrollData_1,%al		 
	call RENDER_16x16_C4
	7:
	popa			 















	ret

SCREEN_HDMA_MODE_7:

	movb SCR_TM,%al      
	testb $0x10,%al      
	jz 0f

	andl $1,%eax
	jmp Screen_HDMA_Mode_Table_7(,%eax,4)

	0:  andl $1,%eax
	jmp Screen_HDMA_Mode_Table_7_S(,%eax,4)

M7_HDMA_P1:
	movb SPR_MASK,%bl
	testb $8,%bl     
	jz  0f
	movb $0x30,%ch   
	call *SPRMODE    
	0:
	call RENDER_MODE_7_FX
	movb SPR_MASK,%bl
	testb $4,%bl     
	jz  0f
	movb $0x20,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $2,%bl     
	jz  0f
	movb $0x10,%ch   
	call *SPRMODE    
	0:
	movb SPR_MASK,%bl
	testb $1,%bl     
	jz  0f
	movb $0,%ch      
	call *SPRMODE    
	0:
	ret
M7_HDMA_P1_S:
	call RENDER_MODE_7_FX
	ret

	.long	
	.balign 16					 

Copy_Screen_Table:
	.long VGA_COPY,SQUASH,MODEX_COPY,MODEX_COPY
	.long HICOLOUR0_COPY,HICOLOUR1_COPY,HICOLOUR2_COPY,STRETCH_COPY

	.balign 16
ScreenAddressL:	.long   0    
ScreenAddressR:	.long   0    
TileAddress:	.long	0
TileAddressY:	.long	0

	.globl HDMAYCount            
HDMAYCount:	.long   0
TileAddressM2:	.long	0
TileAddress_2:	.long	0
TileAddressY_2:	.long	0
TileAddress_4:	.long	0
TileAddressY_4:	.long	0
TileAddress_8:	.long	0
TileAddressY_8:	.long	0
	.globl ScreenAddress1,ScreenAddressL1,ScreenAddressR1,TileAddress1
	.globl ScreenAddress2,ScreenAddressL2,ScreenAddressR2,TileAddress2
	.globl ScreenAddress3,ScreenAddressL3,ScreenAddressR3,TileAddress3
	.globl ScreenAddress4,ScreenAddressL4,ScreenAddressR4,TileAddress4
	.balign 16
ScreenAddress1:	.long   0    
ScreenAddressL1:	.long   0    
ScreenAddressR1:	.long   0    
TileAddress1:	.long   0    
ScreenAddress2:	.long   0    
ScreenAddressL2:	.long   0    
ScreenAddressR2:	.long   0    
TileAddress2:	.long   0    
ScreenAddress3:	.long   0    
ScreenAddressL3:	.long   0    
ScreenAddressR3:	.long   0    
TileAddress3:	.long   0    
ScreenAddress4:	.long   0    
ScreenAddressL4:	.long   0    
ScreenAddressR4:	.long   0    
TileAddress4:	.long   0    

	.balign 16					 
	.globl BG1HScrollData,BG1VScrollData,_TBG1HScr,_TBG1VScr
	.globl BG2HScrollData,BG2VScrollData,_TBG2HScr,_TBG2VScr
	.globl BG3HScrollData,BG3VScrollData,_TBG3HScr,_TBG3VScr
	.globl BG4HScrollData,BG4VScrollData,_TBG4HScr,_TBG4VScr
_TBG1HScr:
HScrollData_1:
BG1HScrollData:	.long	0
_TBG1VScr:
VScrollData_1:
BG1VScrollData:	.long	0
_TBG2HScr:
HScrollData_2:
BG2HScrollData:	.long	0
_TBG2VScr:
VScrollData_2:
BG2VScrollData:	.long	0
_TBG3HScr:
HScrollData_3:
BG3HScrollData:	.long	0
_TBG3VScr:
VScrollData_3:
BG3VScrollData:	.long	0
_TBG4HScr:
HScrollData_4:
BG4HScrollData:	.long	0
_TBG4VScr:
VScrollData_4:
BG4VScrollData:	.long	0

	.balign 16
Tile_Offset_Table_8:
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14

Tile_Offset_Table_8_Y:
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2
	.long	0

Tile_Offset_Table_16_2:
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*2
	.long	16*8*2+2
	.long	16*8*2+4
	.long	16*8*2+6
	.long	16*8*2+8
	.long	16*8*2+10
	.long	16*8*2+12
	.long	16*8*2+14

Tile_Offset_Table_16_2_Y:
	.long	16*8*2+14
	.long	16*8*2+12
	.long	16*8*2+10
	.long	16*8*2+8
	.long	16*8*2+6
	.long	16*8*2+4
	.long	16*8*2+2
	.long	16*8*2
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2
	.long	0

Tile_Offset_Table_16_4:
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*4
	.long	16*8*4+2
	.long	16*8*4+4
	.long	16*8*4+6
	.long	16*8*4+8
	.long	16*8*4+10
	.long	16*8*4+12
	.long	16*8*4+14

Tile_Offset_Table_16_4_Y:
	.long	16*8*4+14
	.long	16*8*4+12
	.long	16*8*4+10
	.long	16*8*4+8
	.long	16*8*4+6
	.long	16*8*4+4
	.long	16*8*4+2
	.long	16*8*4
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2
	.long	0

Tile_Offset_Table_16_8:
	.long	0
	.long	2
	.long	4
	.long	6
	.long	8
	.long	10
	.long	12
	.long	14
	.long	16*8*8
	.long	16*8*8+2
	.long	16*8*8+4
	.long	16*8*8+6
	.long	16*8*8+8
	.long	16*8*8+10
	.long	16*8*8+12
	.long	16*8*8+14

Tile_Offset_Table_16_8_Y:
	.long	16*8*8+14
	.long	16*8*8+12
	.long	16*8*8+10
	.long	16*8*8+8
	.long	16*8*8+6
	.long	16*8*8+4
	.long	16*8*8+2
	.long	16*8*8
	.long	14
	.long	12
	.long	10
	.long	8
	.long	6
	.long	4
	.long	2
	.long	0

	.globl BGMODE
BGMODE:	.long   SCREEN_HDMA_MODE_0   

	.globl Screen_HDMA_Mode
Screen_HDMA_Mode:
	.long	SCREEN_HDMA_MODE_0
	.long	SCREEN_HDMA_MODE_1
	.long	SCREEN_HDMA_MODE_2
	.long	SCREEN_HDMA_MODE_3
	.long	SCREEN_HDMA_MODE_4
	.long	SCREEN_HDMA_MODE_5
	.long	SCREEN_HDMA_MODE_6
	.long   SCREEN_HDMA_MODE_7

Screen_HDMA_Mode_Table_0:
	.long   NO_HDMA_PLANES   
	.long   M0_HDMA_P1       
	.long   M0_HDMA_P2       
	.long   M0_HDMA_P12      
	.long   M0_HDMA_P3       
	.long   M0_HDMA_P13      
	.long   M0_HDMA_P23      
	.long   M0_HDMA_P123     
	.long   M0_HDMA_P4       
	.long   M0_HDMA_P14      
	.long   M0_HDMA_P24      
	.long   M0_HDMA_P124     
	.long   M0_HDMA_P34      
	.long   M0_HDMA_P134     
	.long   M0_HDMA_P234     
	.long   M0_HDMA_P1234    

Screen_HDMA_Mode_Table_1:
	.long   NO_HDMA_PLANES   
	.long   M1_HDMA_P1       
	.long   M1_HDMA_P2       
	.long   M1_HDMA_P12      
	.long   M1_HDMA_P3       
	.long   M1_HDMA_P13      
	.long   M1_HDMA_P23      
	.long   M1_HDMA_P123     

Screen_HDMA_Mode_Table_1_3:
	.long   NO_HDMA_PLANES   
	.long   M1_HDMA_P1_3     
	.long   M1_HDMA_P2_3     
	.long   M1_HDMA_P12_3    
	.long   M1_HDMA_P3_3     
	.long   M1_HDMA_P13_3    
	.long   M1_HDMA_P23_3    
	.long   M1_HDMA_P123_3   

Screen_HDMA_Mode_Table_2:
	.long   NO_HDMA_PLANES   
	.long   M2_HDMA_P1       
	.long   M2_HDMA_P2       
	.long   M2_HDMA_P12      

Screen_HDMA_Mode_Table_3:
	.long   NO_HDMA_PLANES   
	.long   M3_HDMA_P1       
	.long   M3_HDMA_P2       
	.long   M3_HDMA_P12      

Screen_HDMA_Mode_Table_4:
	.long   NO_HDMA_PLANES   
	.long   M4_HDMA_P1       
	.long   M4_HDMA_P2       
	.long   M4_HDMA_P12      

Screen_HDMA_Mode_Table_5:
	.long   NO_HDMA_PLANES   
	.long   M5_HDMA_P1       
	.long   M5_HDMA_P2       
	.long   M5_HDMA_P12      

Screen_HDMA_Mode_Table_6:
	.long   NO_HDMA_PLANES   
	.long   M6_HDMA_P1       

Screen_HDMA_Mode_Table_7:
	.long   NO_HDMA_PLANES   
	.long   M7_HDMA_P1       

Screen_HDMA_Mode_Table_0_S:
	.long   NO_HDMA_PLANES_S     
	.long   M0_HDMA_P1_S         
	.long   M0_HDMA_P2_S         
	.long   M0_HDMA_P12_S        
	.long   M0_HDMA_P3_S         
	.long   M0_HDMA_P13_S        
	.long   M0_HDMA_P23_S        
	.long   M0_HDMA_P123_S       
	.long   M0_HDMA_P4_S         
	.long   M0_HDMA_P14_S        
	.long   M0_HDMA_P24_S        
	.long   M0_HDMA_P124_S       
	.long   M0_HDMA_P34_S        
	.long   M0_HDMA_P134_S       
	.long   M0_HDMA_P234_S       
	.long   M0_HDMA_P1234_S      

Screen_HDMA_Mode_Table_1_S:
	.long   NO_HDMA_PLANES_S     
	.long   M1_HDMA_P1_S         
	.long   M1_HDMA_P2_S         
	.long   M1_HDMA_P12_S        
	.long   M1_HDMA_P3_S         
	.long   M1_HDMA_P13_S        
	.long   M1_HDMA_P23_S        
	.long   M1_HDMA_P123_S       

Screen_HDMA_Mode_Table_1_3_S:
	.long   NO_HDMA_PLANES_S     
	.long   M1_HDMA_P1_S         
	.long   M1_HDMA_P2_S         
	.long   M1_HDMA_P12_S        
	.long   M1_HDMA_P3_S         
	.long   M1_HDMA_P13_3_S      
	.long   M1_HDMA_P23_3_S      
	.long   M1_HDMA_P123_3_S     

Screen_HDMA_Mode_Table_2_S:
	.long   NO_HDMA_PLANES_S     
	.long   M2_HDMA_P1_S         
	.long   M2_HDMA_P2_S         
	.long   M2_HDMA_P12_S        

Screen_HDMA_Mode_Table_3_S:
	.long   NO_HDMA_PLANES_S     
	.long   M3_HDMA_P1_S         
	.long   M3_HDMA_P2_S         
	.long   M3_HDMA_P12_S        

Screen_HDMA_Mode_Table_4_S:
	.long   NO_HDMA_PLANES_S     
	.long   M4_HDMA_P1_S         
	.long   M4_HDMA_P2_S         
	.long   M4_HDMA_P12_S        

Screen_HDMA_Mode_Table_5_S:
	.long   NO_HDMA_PLANES_S     
	.long   M5_HDMA_P1_S         
	.long   M5_HDMA_P2_S         
	.long   M5_HDMA_P12_S        

Screen_HDMA_Mode_Table_6_S:
	.long   NO_HDMA_PLANES_S     
	.long   M6_HDMA_P1_S         

Screen_HDMA_Mode_Table_7_S:
	.long   NO_HDMA_PLANES_S     
	.long   M7_HDMA_P1_S         

	.globl Mode7_A_P,Mode7_B,Mode7_C_P,Mode7_D
Mode7_A:	.long	0
Mode7_B:	.long   0
Mode7_C:	.long	0
Mode7_D:	.long   0
Mode7_A_P:	.long   0    
Mode7_C_P:	.long   0    

HScroll:	.byte	0
	.globl SCR_TM
SCR_TM:	.byte	0			 
	.globl Redo_M7
Redo_M7:	.byte   0x0F

